import Layout from '@/components/layout/Layout';import UserProfileLayout from '@/components/layout/UserProfileLayout';import { H2 } from '@/components/UI/typography/Typography';import React, { useState } from 'react';import SubscriptionsIcons from '@/images/subscriptions';import { cn, formatNumber, serializeJsonToFormData, transformJSONAPIData } from '@/services/utils';import Button from '@/components/UI/button/Button';import { toast } from '@/components/UI/Toast';import usePlans, { checkoutExact, checkoutPlan, getCheckout } from '@/hooks/data/usePlans';import useUser from '@/features/user/hooks/useUser';import style from '@/pages/user/subscriptions.module.css'import Illustrations from '@/images/illustrations';import api from '@/services/api';import { UserType } from '@/features/user/types/user';import { useRouter } from 'next/router';import { logout } from '@/features/user/modules/user';const Subscriptions = ({   fromModal = false ,  loading,   setLoading }:   {     fromModal?: boolean ,      loading: boolean;  setLoading: (loading: boolean) => void;  }) => {  const activeSubscription = React.useState<string>();  const minutesFromSelector = React.useState<number>(15);  const [showEmailInput, setShowEmailInput] = useState(false);  const [email, setEmail] = useState('');  const { plans } = usePlans();  const { user, logInUser } = useUser();  const router = useRouter();  const slug = router.query.slug as string;  const isValidEmail = (email: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);  const handleSubscriptionClick = async () => {    if (fromModal) {      if (!showEmailInput) {        setShowEmailInput(true);        return;      }      if (!isValidEmail(email)) {        toast.error('Zadejte platn√Ω e-mail.');        return;      }       setLoading(true);      const registrationSuccess = await handleRegister();      if (!registrationSuccess) {        return; // Stop if registration failed      }      const loginSuccess = await handleLogin();      if (!loginSuccess) {        return; // Stop if login failed      }      await submitSubscription();    } else {      await submitSubscription();    }  };  const handleLogin = async () => {    try {      await logout().catch(() => { });      const res = await api.post('/auth/login', serializeJsonToFormData({        email,        password: 'xx', // Assuming password is not needed for guest login      }));      const user = transformJSONAPIData<UserType>(res.data).data;      logInUser(user, 4 * 60 * 60); // 4 hours cookie for this flow      return true;    } catch (error) {      toast.error('Validace hosta se nezda≈ôila.');          setLoading(false);      return false;    }  };  const handleRegister = async () => {    try {      const res = await api.post(        '/auth/register',        serializeJsonToFormData({          google_token: '',          email,          role: 'host',          locale: 'cs',          referral_code: null,        })      );      const user = transformJSONAPIData<UserType>(res.data).data;      toast.success('Validace hosta probƒõhla √∫spƒõ≈°nƒõ. Budete p≈ôesmƒõrov√°ni na platebn√≠ br√°nu.');      return true;    } catch (error: any) {      toast.error('Validace hosta se nezda≈ôila.');      toast.error('Tento e-mail je ji≈æ pou≈æ√≠v√°n. P≈ôihlaste se nebo pou≈æijte jin√Ω.');    setLoading(false);      return false;    } finally {    }  };  const submitSubscription = async () => {    try {      const { id } = await checkoutPlan(activeSubscription[0] as string, slug as string);      const checkout = await getCheckout(id, user?.discount_percent ?? 0);      toast.success('Nyn√≠ budete p≈ôesmƒõrov√°ni na platebn√≠ br√°nu.');      window.location.href = checkout.checkout_url;    } catch (error) {      setLoading(false);      toast.error('Nƒõco se pokazilo, zkuste to pros√≠m znovu.');    }      finally {      await new Promise(resolve => setTimeout(resolve, 150));      setLoading(false);    }  };  const submitSubscriptionExact = async () => {    setLoading(true);    try {      const { id } = await checkoutExact('Neomezene', minutesFromSelector[0] ?? 0);      const checkout = await getCheckout(id, 0);      toast.success('Nyn√≠ budete p≈ôesmƒõrov√°ni na platebn√≠ br√°nu.');      window.location.href = checkout.checkout_url;    } catch (error) {      setLoading(false);      toast.error('Nƒõco se pokazilo, zkuste to pros√≠m znovu.');    }  };  const [isModalOpen, setIsModalOpen] = useState(false);  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);  const filteredPlans = plans?.filter((plan) => plan.id !== '99');  const limitedPlans = fromModal ? filteredPlans?.slice(0, 3) : filteredPlans;  const SubscriptionIcon = {    1: SubscriptionsIcons.SubscriptionStart,    2: SubscriptionsIcons.SubscriptionBronze,    3: SubscriptionsIcons.SubscriptionSilver,    4: SubscriptionsIcons.SubscriptionSilver,    5: SubscriptionsIcons.SubscriptionGold,    6: SubscriptionsIcons.SubscriptionGold,  };  return (    <>      <div>        {!fromModal && (          <>            <H2 tag="h1">Zakoupit ƒças</H2>            <div className="text-sm mt-4">Aktu√°ln√≠ ƒças: {Math.floor((user?.seconds_balance || 0) / 60)} min</div>            <div className="text-sm ">Aktu√°ln√≠ sleva: {user?.discount_percent} % </div>          </>)}        <div className="mt-8 flex max-w-3xl flex-col gap-4">          <button            onClick={(e) => {              e.stopPropagation();              setIsModalOpen(true);            }}            className="w-5 h-5 sm:w-6 sm:h-6 bg-blue-500 hover:bg-blue-400 rounded-full flex items-center justify-center text-white text-xs sm:text-sm font-bold transition-colors duration-200 bg-primary-500"            title="Informace o bezpeƒçnosti platby"          >            ?          </button>          {!fromModal && (<div className="px-6 text-sm font-500 text-secondary/80">            Ps√°t s pr≈Øvodcem m≈Ø≈æe≈° ji≈æ od 3 minut.          </div>)}          {limitedPlans?.map((plan, index) => (            <React.Fragment key={plan.id}>              <SubscriptionButton                id={plan.id}                state={activeSubscription}                title={plan.title}                minutes={plan.minutes_count}                description={plan.minutes_count + 'min'}                price_visible={true}                first_payed={user?.first_payed ?? false}                freeMinutes={fromModal ? -1 : plan.free_minutes_count}                price={plan.price}                discount={user?.discount_percent ?? 0}                icon={SubscriptionIcon[Number(plan.id) as keyof typeof SubscriptionIcon]}                makerdown={index ===2}                onClick={() => {                  activeSubscription[1](plan.id);                  setIsPaymentModalOpen(true);                }}              />              {}              {!fromModal && index === 0 && (                <div className="px-6 text-sm font-500 text-secondary/80">                  Volat pr≈Øvodci m≈Ø≈æe≈° ji≈æ od 5 minut.                </div>              )}              {!fromModal && index === 1 && (                <div className="px-6 text-sm font-500 text-secondary/80">                  Rezervovat sezen√≠ s pr≈Øvodcem si m≈Ø≈æe≈° ji≈æ od 15 minut.                </div>              )}            </React.Fragment>          ))}          <div className="flex items-center text-sm font-500 text-white/60 ">            <Illustrations.IllustrationCoins className='w-24 h-24' />            <div className="flex items-center ml-4">              {!fromModal && (<>Pokud nebude≈° spokojen, <strong className="ml-1 text-white">vr√°t√≠me Ti pen√≠ze.</strong></>)}            </div>          </div>          <span className='text-md text-white/60 whitespace-pre-wrap'> Nev√≠≈° si rady? </span> <span className='text-white'> Volej <a href="tel:+420608047033">+420 608 047 033</a><span className='text-white/60'> nebo napi≈° na </span><a href="mailto:podpora@spirio.cz">podpora@spirio.cz</a></span>        </div>      </div>      {isModalOpen && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">          {}          <div className="bg-primary-700 rounded-lg shadow-xl w-full max-w-lg mx-auto p-6 relative border border-primary-500/30">            {}            <button              onClick={() => setIsModalOpen(false)}              className="absolute top-3 right-3 text-gray-300 hover:text-white text-2xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-primary-600 transition-colors duration-200"            >              √ó            </button>            {}            <div className="text-center mb-4">              <div className="inline-flex items-center justify-center w-16 h-16 bg-blue-500/20 rounded-full mb-4">                <svg className="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />                </svg>              </div>              <h2 className="text-xl font-bold text-white mb-2">üîí Kartou online</h2>              <div className="w-full h-px bg-gradient-to-r from-transparent via-primary-500 to-transparent mb-4"></div>            </div>            <div className="text-white/90 text-sm leading-relaxed space-y-3">              <p>                <span className="font-semibold text-green-400">‚úì Zabezpeƒçen√° platba kartou</span>, kterou provozuje <strong>Stripe, inc.</strong> a <strong>PayU S.A.</strong>              </p>              <p>                Ve≈°ker√© detailn√≠ informace jsou ulo≈æeny v souladu s <span className="text-blue-400 font-semibold">PCI DSS</span> standardem (data jsou ulo≈æena v souladu s karetn√≠mi asociacemi jako je <strong>VISA</strong> nebo <strong>MasterCard</strong>).              </p>              <p>                <span className="text-yellow-400 font-semibold">Spirio.cz a SpirioTech s.r.o. nedisponuje ≈æ√°dn√Ωmi z tƒõchto √∫daj≈Ø.</span>              </p>            </div>            {}            <div className="text-center mt-6">              <Button color='gradient'                onClick={() => setIsModalOpen(false)}                className="bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-500 hover:to-blue-500 text-white font-bold py-3 px-8 rounded-lg transition-colors duration-200 shadow-lg"              >                ‚úì Rozum√≠m              </Button>            </div>          </div>        </div>      )}      {}      {isPaymentModalOpen && (        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-2 sm:p-4">          <div className="bg-primary-700 rounded-xl shadow-2xl w-full max-w-lg sm:max-w-2xl mx-auto relative border border-primary-500/30 max-h-[95vh] sm:max-h-[90vh] overflow-y-auto">            {}            <button              onClick={() => {                setIsPaymentModalOpen(false);                setShowEmailInput(false);                setEmail('');              }}              className="absolute top-3 right-3 sm:top-4 sm:right-4 text-black hover:text-white text-xl sm:text-2xl font-bold w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center rounded-full bg-primary-600 transition-colors duration-200 z-10"            >              √ó            </button>            <div className="p-4 sm:p-8">              {}              <div className="text-center mb-6 sm:mb-8">                <div className="inline-flex items-center justify-center w-16 h-16 sm:w-20 sm:h-20 bg-green-500/20 rounded-full mb-4">                  <Illustrations.IllustrationCard className="w-8 h-8 sm:w-10 sm:h-10 text-green-400" />                </div>                <h2 className="text-2xl sm:text-3xl font-bold text-white mb-2">                   Dokonƒçit n√°kup                </h2>                {}                {activeSubscription[0] && (                  <div className="bg-primary-800/50 rounded-lg p-4 mb-4 border border-primary-500/30">                    {(() => {                      const selectedPlan = plans?.find(plan => plan.id === activeSubscription[0]);                      if (!selectedPlan) return null;                      const finalPrice = user?.discount_percent                         ? Math.round(selectedPlan.price * (1 - user.discount_percent / 100))                        : selectedPlan.price;                      return (                        <div className="flex flex-col sm:flex-row items-center justify-between gap-3">                          <div className="text-center sm:text-left">                            <h3 className="text-lg font-bold text-white">{selectedPlan.title}</h3>                            {}                          </div>                          <div className="text-center sm:text-right">                            {user?.discount_percent ? (                              <div>                                <div className="text-gray-400 line-through text-sm">                                  {formatNumber(selectedPlan.price, { currency: 'czk' })}                                </div>                                <div className="text-2xl font-bold text-yellow-400">                                  {formatNumber(finalPrice, { currency: 'czk' })}                                </div>                                <div className="text-green-400 text-xs">                                  Sleva {user.discount_percent}%                                </div>                              </div>                            ) : (                              <div className="text-2xl font-bold text-yellow-400">                                {formatNumber(selectedPlan.price, { currency: 'czk' })}                              </div>                            )}                          </div>                        </div>                      );                    })()}                  </div>                )}                <p className="text-base sm:text-lg text-white/80 mb-4">                  Klikni na tlaƒç√≠tko n√≠≈æe pro platbu                </p>              </div>              <div className="flex flex-col justify-center items-center gap-4 sm:gap-6">                {!showEmailInput && (                  <>                    <div className="w-full">                      <Button color='gradient'                        className="!rounded-lg items-center justify-center py-4 px-6 sm:py-6 sm:px-8 w-full text-white font-bold text-lg sm:text-xl bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-500 hover:to-blue-500 transition-all duration-200 shadow-xl relative overflow-hidden"                        onClick={activeSubscription[0] === '99' ? submitSubscriptionExact : handleSubscriptionClick}                        loading={loading}                      >                        <div className="flex flex-col items-center gap-3 sm:gap-4 relative z-10">                          {}                          <div className="flex items-center gap-2 sm:gap-3 flex-wrap justify-center">                            <Illustrations.IllustrationCard className="w-8 h-8 sm:w-10 sm:h-10 text-white" />                            <span className="text-lg sm:text-xl font-bold text-center">                             Zaplatit kartou online                             </span>                            {}                          </div>                          {}                          <div className="flex items-center gap-2 sm:gap-4 flex-wrap justify-center">                            <div className="flex flex-col items-center rounded-lg p-1 sm:p-2">                              <Illustrations.IllustrationMastercard className="w-14 h-10 " />                              <span className="text-white text-xs mt-1">MasterCard</span>                            </div>                            <div className="flex flex-col items-center rounded-lg p-1 sm:p-2">                              <Illustrations.IllustrationVisa className="w-14 h-10 " />                              <span className="text-white text-xs mt-1">VISA</span>                            </div>                            <div className="flex flex-col items-center rounded-lg p-1 sm:p-2">                              <Illustrations.IllustrationStripe className="w-14 h-10" />                              <span className="text-white text-xs mt-1">Stripe</span>                            </div>                          </div>                        </div>                      </Button>                    </div>                    {}                    <div className="flex items-center justify-center gap-4 sm:gap-6 text-xs sm:text-sm text-white/80 flex-wrap">                      <div className="flex items-center gap-1 sm:gap-2">                        <span className="text-green-400">üîí</span>                        <span>SSL zabezpeƒçen√≠</span>                      </div>                      <div className="flex items-center gap-1 sm:gap-2">                        <span className="text-green-400">‚ö°</span>                        <span>Okam≈æit√° aktivace</span>                      </div>                    </div>                  </>                )}                {fromModal && showEmailInput && (                  <div className="w-full text-center px-2 sm:px-0">                    <h3 className="text-lg sm:text-xl font-bold text-white mb-3">                      Zadej email pro platbu                    </h3>                    <p className="text-white/80 text-sm sm:text-base mb-4 sm:mb-6">                      Pro dokonƒçen√≠ objedn√°vky pot≈ôebujeme tv≈Øj email                    </p>                    <div className="relative mb-4 sm:mb-6">                      <input                        type="email"                        value={email}                        onChange={(e) => setEmail(e.target.value)}                        placeholder="nap≈ô√≠klad: jmeno@email.cz"                        className="w-full px-3 py-2 sm:px-4 sm:py-3 rounded-lg border-2 border-gray-300 text-black text-center text-base sm:text-lg focus:border-blue-500 focus:outline-none transition-colors"                      />                      {isValidEmail(email) && (                        <div className="absolute right-2 sm:right-3 top-1/2 transform -translate-y-1/2 text-green-500 text-lg sm:text-xl">                          ‚úì                        </div>                      )}                    </div>                    <Button color='gradient'                      className="w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-500 hover:to-blue-500 text-white font-bold py-3 px-4 sm:py-4 sm:px-6 rounded-lg text-base sm:text-lg transition-colors duration-200"                      onClick={async () => {                        if (!isValidEmail(email)) {                          toast.error('Zadej platn√Ω e-mail.');                          return;                        }                        await handleSubscriptionClick();                      }}                      loading={loading}                    >                      <div className="flex items-center justify-center gap-2">                        <span>Potvrdit email a p≈ôej√≠t na platbu</span>                        <span>‚Üí</span>                      </div>                    </Button>                  </div>                )}              </div>            </div>          </div>        </div>      )}    </>  );};export default Subscriptions;Subscriptions.getLayout = function getLayout(page: React.ReactElement) {  return (    <Layout hideFooter>      <UserProfileLayout>{page}</UserProfileLayout>    </Layout>  );};export const SubscriptionButtonFree: (  props: {    id: string;    state: [string | undefined, React.Dispatch<React.SetStateAction<string | undefined>>];    minutes: [number | undefined, React.Dispatch<React.SetStateAction<number | 15>>];    icon: (props?: React.SVGProps<SVGSVGElement>) => JSX.Element;  } & React.ButtonHTMLAttributes<HTMLButtonElement>,) => JSX.Element = ({ id, icon: Icon, className, ...props }) => {  const [activeSubscription, setActiveSubscription] = props.state;  const [price, setPrice] = useState(500); // Default price  const isActive = activeSubscription === id;  const minPrice = 100;  const maxPrice = 1000;  const [minutes, setMinutes] = props.minutes;  const minMinutes = 15;  const maxMinutes = 180;  const basePricePerMin = 39; // Default price per min for calculation  const getPricePerMinute = (mins: number) => {    if (mins <= 19) return 38;    if (mins <= 29) return 37;    if (mins <= 39) return 36;    if (mins <= 49) return 35;    if (mins <= 59) return 34;    if (mins <= 129) return 33;    return 32;  };  const pricePerMin = getPricePerMinute(minutes ?? 15);  const totalPrice = (minutes ?? 15) * pricePerMin; // Total cost calculation  const discount = (basePricePerMin - pricePerMin) * (minutes ?? 15); // Total savings  return (    <button      {...props}      onClick={() => setActiveSubscription(id)}      className={cn('w-full rounded p-0.5 text-left', isActive ? 'bg-gradient-primary' : 'bg-primary-700', className)}    >      <div className="flex items-center gap-4 rounded bg-primary-900 p-4">        {}        {Icon && <Icon className="w-14 h-14 flex-shrink-0" />}        {}        <div className="flex-1 !bg-primary-800">          {}          <div className="relative ">            <div className="font-500 mt-2 mb-2">Intuice ‚Äì  Zvol si ƒças jak pot≈ôebuje≈°</div>            <input              type="number"              className="w-full bg-primary-900 text-white text-xl font-semibold px-4 py-2 rounded-md outline-none sm:text-center"              value={minutes}              onChange={(e) => {                let value = parseInt(e.target.value, 10);                if (isNaN(value)) value = minMinutes;                if (value < minMinutes) value = minMinutes;                if (value > maxMinutes) value = maxMinutes;                setMinutes(value);              }}            />            <span className="absolute right-1/2 sm:right-1/3 top-3/4 transform -translate-y-1/2 text-gray-400">Minut</span>            <span className="absolute right-3 top-3/4 transform -translate-y-1/2 text-xs text-[#ddcd54]">              ({pricePerMin} Kƒç/min)            </span>          </div>          {}          <input            type="range"            min={minMinutes}            max={maxMinutes}            value={minutes}            onChange={(e) => setMinutes(Number(e.target.value))}            className={`${style.slider} w-full mt-4 appearance-none bg-transparent cursor-pointer`}          />          {}          {}          {}          <div className="text-lg text- font-bold">            Celkov√° cena: <span className='text-[#ddcd54] strong'>{totalPrice} Kƒç</span>          </div>          {}          {discount > 0 && (            <div className="text-green-400 text-sm font-semibold">              U≈°et≈ô√≠≈° <span className='text-[#ddcd54] strong'> {discount} Kƒç</span> oproti z√°kladn√≠ sazbƒõ            </div>          )}        </div>      </div>    </button>  );};export const SubscriptionButton: (  props: {    state: [string | undefined, React.Dispatch<React.SetStateAction<string | undefined>>];    icon: (props?: React.SVGProps<SVGSVGElement>) => JSX.Element;    title: string;    price_visible: boolean;    first_payed: boolean;    description: string | JSX.Element;    price: number;    minutes: number;    freeMinutes?: number | null;    discount?: number | null;    makerdown?: boolean;    onClick?: () => void;  } & React.ButtonHTMLAttributes<HTMLButtonElement>,) => JSX.Element = ({ id, icon: Icon, title, price_visible, description, minutes, first_payed, price, freeMinutes, discount, makerdown, className, onClick, ...props }) => {  const [activeSubscription, setActiveSubscription] = props.state;  const active = activeSubscription === id;  const handleClick = () => {    if (onClick) {      onClick();    } else {      setActiveSubscription(id);    }  };  return (    <button      {...props}      onClick={handleClick}      className={cn('w-full rounded p-0.5 text-left', active ? 'bg-gradient-primary' :makerdown ? 'bg-secondary' :  'bg-primary-800 border border-black', className)}    >        {makerdown && (    <div className="mb-2 text-center text-sm font-semibold text-black">      Nejobl√≠benƒõj≈°√≠ bal√≠ƒçek    </div>  )}      <div className={cn("flex items-center gap-4 rounded bg-primary-800 p-4.5","flex-col")}>         <div className="items-center flex gap-2 text-sm font-600">           {Icon && <Icon className="w-14 h-14 flex-shrink-0" />}          {price_visible && discount ? (            <div className="flex flex-col items-center ">              <div className="line-through text-xs text-gray-400 rounded bg-primary-900 px-4 py-1  ">                {formatNumber(price, { currency: 'czk' })}              </div>              <div className="rounded bg-primary-750 px-4 py-1 font-bold text-white">                {formatNumber(Math.round(price * (1 - discount / 100)), { currency: 'czk' })}              </div>            </div>          ) : (            price_visible && (              <div className="rounded items-center bg-primary-650 px-4 py-2">                {formatNumber(price, { currency: 'czk' })}              </div>            )          )}          {!price_visible && (            <div className="rounded bg-primary-750 px-4 text-sm font-600" />          )}        </div>        <div>          <div className="font-500 mb-2">{title}</div>          <div className="text-xs">            <span className=" text-lg text-[#ddcd54]">{description} </span>{(!first_payed && minutes && freeMinutes !== -1) && <span className="text-[#ddcd54]"> + {minutes} min. zdarma</span>}          </div>          {}        </div>      </div>    </button>  );};export async function getServerSideProps() {  return {};}
import Layout from '@/components/layout/Layout';import React from 'react';import { H3 } from '@/components/UI/typography/Typography';import useFormErrors from '@/hooks/useFormErrors';import { yupResolver } from '@hookform/resolvers/yup';import { useForm } from 'react-hook-form';import * as yup from 'yup';import TextInput from '@/components/Inputs/TextInput';import Button from '@/components/UI/button/Button';import PasswordInput from '@/components/Inputs/PasswordInput';import { IconFacebookLogo, IconGoogleLogo } from '@/components/UI/Icons';import { route } from '@/services/routes';import { logout } from '@/features/user/modules/user';import { UserType } from '@/features/user/types/user';import api from '@/services/api';import { serializeJsonToFormData, transformJSONAPIData } from '@/services/utils';import { useRouter } from 'next/router';import useUser from '@/features/user/hooks/useUser';import NextImage from 'next/image';import RegisterImage from '@/images/registrace.png';import { GetServerSideProps } from 'next';import { toast } from '@/components/UI/Toast';import { IResolveParams } from 'reactjs-social-login';import Toggler from '@/components/UI/Toggler';import dynamic from 'next/dynamic';import { pushToDataLayer } from '@/hooks/data/gtm';const LoginSocialGoogle = dynamic(() => import('reactjs-social-login').then((lib) => lib.LoginSocialGoogle), { ssr: false });const LoginSocialFacebook = dynamic(() => import('reactjs-social-login').then((lib) => lib.LoginSocialFacebook), { ssr: false });export default function Registration({ referral }: { referral?: string }) {  const router = useRouter();  const { logInUser } = useUser();  const { errors: formErrors, transformErrors } = useFormErrors();  const schema = yup.object({    email: yup.string().email(formErrors.email).required(formErrors.required),    password: yup.string().required(formErrors.required),    password_confirmation: yup      .string()      .nullable()      .oneOf([yup.ref('password'), null], formErrors.password_match)      .required(formErrors.required),    referral_code: yup.string().optional().nullable(),  });  type FormType = yup.InferType<typeof schema>;  const {    register,    handleSubmit,    setError,    watch,    formState: { errors, isSubmitting },  } = useForm<FormType>({    resolver: yupResolver(schema),    defaultValues: {      email: '',      password: '',      password_confirmation: '',      referral_code: referral ?? null,    },  });  const socialRegistration = async ({ data, provider }: IResolveParams) => {    const providerData = {      google: {        key: 'google_token',        token: data?.access_token,      },      facebook: {        key: 'fb_token',        token: data?.accessToken,      },    };    await logout().catch(() => { });    return api      .post(        '/auth/register',        serializeJsonToFormData({          [providerData[provider as keyof typeof providerData].key]: providerData[provider as keyof typeof providerData].token,          email: data?.email,          role: 'customer',          locale: 'cs',          referral_code: watch('referral_code') || null,        }),      )      .then((res) => {        const user = transformJSONAPIData<UserType>(res.data).data;        logInUser(user);        if (watch('referral_code')) {          toast.success('Po dokončení registrace a zakoupení balíčku obdržíte vy i uživatel z referral odkazu minuty ZDARMA.');        }        if (user.email_verified_at) {          pushToDataLayer('Registrace', {            pagePath: window.location.pathname,            title: 'google/fb/apple',          });          const restored = (() => {            try {              const raw = localStorage.getItem('post-login-intent');              if (!raw) return false;              const intent = JSON.parse(raw) as { type?: string; slug?: string; action?: 'video' | 'audio' | 'chat' };              localStorage.removeItem('post-login-intent');              if (intent?.type === 'guide-action' && intent.slug) {                const url = intent.action                  ? { pathname: route.discoverDetail(intent.slug), query: { start: intent.action } }                  : { pathname: route.discoverDetail(intent.slug) };                router.push(url);                return true;              }            } catch {}            return false;          })();          if (!restored) router.push(route.homepage());          toast.success('Registrace proběhla úspěšně.');        } else {          router.push({ pathname: route.verifyEmail(), query: { email: data?.email } });        }      })      .catch(() => {        toast.error(`Přes službu ${provider} se nepodařilo zaregistrovat.`);      });  };  const onSubmit = handleSubmit(async (data: FormType) => {    const { password_confirmation, referral_code, ...values } = data;    await logout().catch(() => { });    return api      .post('/auth/register', serializeJsonToFormData({ ...values, referral_code: referral_code || null, role: 'customer', locale: 'cs' }))      .then((res) => {        const user = transformJSONAPIData<UserType>(res.data).data;        if (referral_code) {          toast.success('Po dokončení registrace a zakoupení balíčku obdržíte vy i uživatel z referral odkazu minuty ZDARMA.');        }        if (user.email_verified_at) {          logInUser(user);          const restored = (() => {            try {              const raw = localStorage.getItem('post-login-intent');              if (!raw) return false;              const intent = JSON.parse(raw) as { type?: string; slug?: string; action?: 'video' | 'audio' | 'chat' };              localStorage.removeItem('post-login-intent');              if (intent?.type === 'guide-action' && intent.slug) {                const url = intent.action                  ? { pathname: route.discoverDetail(intent.slug), query: { start: intent.action } }                  : { pathname: route.discoverDetail(intent.slug) };                router.push(url);                return true;              }            } catch {}            return false;          })();          if (!restored) router.push(route.homepage());          toast.success('Registrace proběhla úspěšně.');        } else {          pushToDataLayer('Registrace', {            pagePath: window.location.pathname,            title: document.title,          });          router.push({ pathname: route.verifyEmail(), query: { email: values.email } });        }      })      .catch((err) => {        transformErrors(err, setError);      });  });  return (    <div className="container grid gap-10 lg:grid-cols-2 lg:py-8 xl:max-w-7xl">      <div className="order-2 mb-12 mt-19 lg:order-1 lg:mt-18">        {}        {}        {}        <NextImage src={RegisterImage} alt="Registrace"          width={400} height={400} className="hidden sm:block mx-auto h-60 max-w-[200px] mt-24 object-cover sm:h-auto sm:max-w-none" />      </div>      <div className="order-1 flex min-h-[calc(100vh-var(--topbar-height)-7.5rem)] flex-col rounded-xl py-10 sm:py-15 lg:order-2 lg:px-18 lg:bg-gradient">        <>          <div>            <H3 tag="h1">Registrovat se</H3>            <div className="flex flex-col mt-2.5 gap-2.5">              <span> Už máš účet?{' '}</span>              <Button href={route.login()} color='gradient' className="w-full text-white text-xl !rounded-md">                Přihlásit se              </Button>            </div>            <p className="mt-9 mb-4">A nebo si ho jednoduše vytvoř. Registrace a profilu na SPIRIO je zcela zdrama.</p>             <p className="mt-4 mb-4">Přes: </p>             <div className="flex flex-col gap-2.5 [&>button]:whitespace-normal [&>button]:!px-14">                <Toggler>                  {({ open, setOpen }) => (                    <LoginSocialGoogle                      client_id={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!}                      redirect_uri={process.env.NEXT_PUBLIC_FRONTEND_URL}                      scope="profile email"                      discoveryDocs="claims_supported"                      onResolve={async ({ provider, data }: IResolveParams) => {                        setOpen(true);                        await socialRegistration({ provider, data });                        setOpen(false);                      }}                      onReject={() => {                        toast.error('Nepodařilo se zaregistrovat přes Google');                      }}                    >                      <Button color="transparent-white" className="relative w-full" loading={open}>                        <IconGoogleLogo className="pointer-events-none absolute left-5 top-1/2 h-6 -translate-y-1/2" />                        Registrovat se přes Google                      </Button>                    </LoginSocialGoogle>                  )}                </Toggler>                <Toggler>                  {({ open, setOpen }) => (                    <LoginSocialFacebook                      appId={process.env.NEXT_PUBLIC_FACEBOOK_APP_ID!}                      redirect_uri={process.env.NEXT_PUBLIC_FRONTEND_URL}                      fieldsProfile={'id,email'}                      onResolve={async ({ provider, data }: IResolveParams) => {                        setOpen(true);                        await socialRegistration({ provider, data });                        setOpen(false);                      }}                      onReject={() => {                        toast.error('Nepodařilo se zaregistrovat přes Facebook');                      }}                    >                      <Button color="transparent-white" className="relative w-full" loading={open}>                        <IconFacebookLogo className="pointer-events-none absolute left-5 top-1/2 h-6 -translate-y-1/2" />                        Registrovat se přes Facebook                      </Button>                    </LoginSocialFacebook>                  )}                </Toggler>                {}              </div>            <p className="mt-4 mb-4">Nebo vyplň formulář níže:</p>            <div className="mt-7.5 flex flex-col gap-7.5">              <form onSubmit={onSubmit} className="mt-8">              <div className="flex flex-col gap-6">                <TextInput {...register('email')} label="E-mail" error={errors.email?.message} autoComplete="new-password" />                <PasswordInput {...register('password')} label="Heslo" error={errors.password?.message} autoComplete="new-password" />                <PasswordInput {...register('password_confirmation')} label="Heslo znovu" error={errors.password_confirmation?.message} />                <div className="flex flex-col gap-2">                  <TextInput {...register('referral_code')} label="Referral odkaz" error={errors.referral_code?.message} />                  <p className="text-sm text-white/70">                    Referral odkaz dostaneš od někoho kdo už je zaregistrován a má zakoupen balíček. Po zadání referral linku obdrží účet s referral linkem 5                    minut zdarma. I ty dostaneš 5 minut zdarma při prvním nákupu!                  </p>                </div>              </div>              <Button type="submit" color="gradient" className="mt-7.5 w-full" loading={isSubmitting}>                Registrovat              </Button>            </form>              <p className="text-center font-500 [&>a]:underline">                Registrací souhlasíš s{' '}                <a href="/docs/term-and-conditions-cs.pdf" target="_blank">                  obchodními podmínkami                </a>{' '}                a potvrzuješ přečtení našich{' '}                <a href="/docs/privacy-policy-cs.pdf" target="_blank">                  zásad zpracování osobních údajů                </a>                .              </p>              <p className="text-center font-500 [&>a]:underline flex flex-col items-center">                <span className='text-md text-white/60 whitespace-pre-wrap'> Nevíš si rady? </span>                <span className='text-white'> Volej <a href="tel:+420608047033">+420 608 047 033</a>                  <span className='text-white/60'> nebo napiš na </span>                  <a href="mailto:podpora@spirio.cz">podpora@spirio.cz</a></span>              </p>            </div>          </div>        </>      </div>    </div>  );}Registration.getLayout = function getLayout(page: React.ReactElement) {  return <Layout hideFooter>{page}</Layout>;};export const getServerSideProps: GetServerSideProps = async ({ query }) => {  const referral = query.referral ?? null;  return {    props: { referral },  };};
import '../styles/globals.css';import type { AppProps } from 'next/app';import Head from 'next/head';import { GlobalStoreProvider, useGlobalStore } from '@/store/globalStore';import { BreakpointProvider } from '@/hooks/useBreakpoint';import { NextPage } from 'next';import React, { ReactElement, ReactNode } from 'react';import { useRouter } from 'next/router';import { cn } from '@/services/utils';import Fonts from '@/components/UI/Fonts';import { Toaster } from 'sonner';import useUser from '@/features/user/hooks/useUser';import { clearUser } from '@/features/user/modules/user';import { route } from '@/services/routes';import CookieConsentComponent from '@/features/cookie-consent/components/CookieConsent';import useEffectOnce from '@/hooks/useEffectOnce';import { GoogleTagManager } from '@next/third-parties/google';import { PagesProgressBar as ProgressBar } from 'next-nprogress-bar';import useRequestFCMPermistion from '@/features/fcm/useRequestFCMPermistion';import AuthModal from '@/features/auth/components/AuthModal';import useModal from '@/hooks/useModal';const { avenier, poppins } = Fonts();function MyApp({ Component, pageProps }: AppPropsWithLayout) {  const getLayout = Component.getLayout ?? ((page) => page);  return (    <>      <Head>        <meta name="viewport" content="minimum-scale=1, initial-scale=1, width=device-width, shrink-to-fit=no, viewport-fit=cover" />      </Head>      <Providers>        <Initializer>          <div className={cn([poppins.className, avenier.variable])}>{getLayout(<Component {...pageProps} />)}</div>        </Initializer>        {}        <AuthModal />      </Providers>      <ProgressBar height="2px" color="#D41CFF" options={{ showSpinner: false }} shallowRouting />      <Toaster position="top-right" />      <CookieConsentComponent />      <GoogleTagManager gtmId="GTM-WL84V974" />    </>  );}const Providers: React.FC<{ children: React.ReactNode }> = ({ children }) => (  <BreakpointProvider>    <GlobalStoreProvider>{children}</GlobalStoreProvider>  </BreakpointProvider>);const Initializer: (props: { children: JSX.Element }) => JSX.Element = ({ children }) => {  const router = useRouter();  const [{ init }, setGlobalStore] = useGlobalStore();  const { user, revalidateUser } = useUser();  const { openModal } = useModal();  useRequestFCMPermistion();  const initialLoad = async () => {    if (localStorage.getItem('auto-login')) {      await revalidateUser();    }    setGlobalStore((store) => ({ ...store, init: true }));  };  const onWindowFocus = async () => {    await revalidateUser();  };  useEffectOnce(() => {    window.addEventListener('focus', onWindowFocus);    if (!init) {      initialLoad();    } else {      onWindowFocus();    }    return () => {      window.removeEventListener('focus', onWindowFocus);    };  }, []);  React.useEffect(() => {    if ((router.asPath.indexOf('/user') > -1 || router.asPath.indexOf('/guide') > -1 || router.asPath.indexOf('/call') > -1) && init) {      if (!user) {        clearUser();        openModal('auth', { type: 'query', queries: { mode: 'login', redirect_url: router.asPath } });      } else if (user && !user.email_verified_at) {        router.replace({ pathname: route.verifyEmail(), query: { email: user.email } });      }    }  }, [router.pathname, user, init]);  return <>{children}</>;};type NextPageWithLayout = NextPage & {  getLayout?: (page: ReactElement) => ReactNode;};type AppPropsWithLayout = AppProps & {  Component: NextPageWithLayout;};export default MyApp;
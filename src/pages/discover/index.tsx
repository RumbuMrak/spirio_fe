import { IconLogoFilled, IconLogoFilledGradient } from '@/components/UI/Icons';import { H3 } from '@/components/UI/typography/Typography';import GuideCard from '@/components/general/GuideCard';import PostCard from '@/components/general/PostCard';import Layout from '@/components/layout/Layout';import PageTitle from '@/components/layout/PageTitle';import Link from 'next/link';import React from 'react';import { route } from '@/services/routes';import useHoroscopes from '@/hooks/data/useHoroscopes';import useSigns from '@/hooks/data/useSigns';import usePosts from '@/hooks/data/usePosts';import Pagination from '@/components/UI/pagination/Pagination';import useGuides, { getGuides } from '@/hooks/data/useGuides';import useSpecializations from '@/hooks/data/useSpecializations';import useStreams from '@/hooks/data/useStreams';import { GetServerSideProps } from 'next';import { GuideProfileType } from '@/features/user/types/user';import { PaginatedResponse } from '@types';import { getStreamsWeb } from '@/features/calls/api/calls';import { StreamType } from '@/features/calls/types/calls';import useUser from '@/features/user/hooks/useUser';import StreamCard from '@/components/UI/StreamCard';import { useRouter } from 'next/router';export default function Discover({  guides: initialGuidesData,  streams: initialStreamsData,}: {  guides: { data: GuideProfileType[] } & PaginatedResponse;  streams: { data: StreamType[] } & PaginatedResponse;}) {  const router = useRouter();  const specialization = router?.query.specialization as string;  const { user } = useUser();  const { horoscopes } = useHoroscopes('today');  const { data: posts, postsPages } = usePosts();  const { data: streams } = useStreams(initialStreamsData);  const {    data: guides,    guidesPages,    guidesCount,    isLoading,  } = useGuides({ 'filter[specialization_id]': specialization ? [specialization] : undefined }, initialGuidesData);  const signs = useSigns();const sortedGuides = [...(guides || [])].sort((a, b) => {  const getRank = (status?: string) => {    const s = status?.toLowerCase() ?? "";    if (s.includes("online")) return 0;    if (s.includes("busy")) return 1;    return 2; // everything else  };  return getRank(a.call_status) - getRank(b.call_status);});  return (    <>  <section className="pb-14">  <PageTitle     breadcrumbs={[{ title: 'Dostupní průvodci' }]}  ><StreamCard streams={streams} user={user} ></StreamCard>  <Link href="#guides" className='block !mt-15' scroll={true}>      <span className="cursor-pointer hover:underline">        Najít svého průvodce      </span>    </Link>  </PageTitle></section>      <section id="guides" className="scroll-m-24 pb-12 lg:pb-20">        <div className="container mb-6">          <div className="flex flex-col items-center">            {}          </div>        </div>        <SelectSpecialization />        <div id="guides" className="container mt-16 xl:!max-w-7xl">          <div className="grid grid-cols-2 gap-4 lg:grid-cols-4 ">{        sortedGuides?.map((guide, index) => <GuideCard key={index} {...guide} />)          }</div>          {guidesCount === 0 && !isLoading && <div className="my-20 text-center">Nenalezen žádný průvodce</div>}          {guides?.length && <Pagination pageCount={guidesPages} containerId="guides" className="mt-15" />}        </div>      </section>      <section className="pb-40">        <div className="container grid gap-x-6 gap-y-15 lg:grid-cols-2">          <div id="posts" className="scroll-m-24">            <H3 className="mb-10">Články</H3>            <div className="flex flex-col gap-7.5">{posts?.map((post, index) => <PostCard key={index} {...post} />)}</div>            {posts?.length && <Pagination pageCount={postsPages} queryName="posts-page" containerId="posts" className="mt-15" />}          </div>          <div id="horoscopes" className="flex scroll-m-24 flex-col lg:ml-20">            <H3 className="mb-10">Horoskop na dnešní den</H3>            <div className="mb-20 grid grid-cols-2 gap-4 sm:grid-cols-4">              {horoscopes?.map((horoscope, index) => (                <Link                  key={index}                  href={route.horoscopeDetail(horoscope.sign)}                  className="flex h-40 flex-col items-center justify-center gap-4.5 rounded-lg bg-gradient-to-b from-primary-725 to-primary-775 p-4 text-lg font-600 transition-colors hover:to-primary-725 [&>svg]:mt-2 [&>svg]:h-14"                >                  <>                    {signs[horoscope.sign].icon()}                    {signs[horoscope.sign].title}                  </>                </Link>              ))}            </div>            <div className="sticky top-20">              {}            </div>          </div>        </div>      </section>    </>  );}Discover.getLayout = function getLayout(page: React.ReactElement) {  return <Layout>{page}</Layout>;};export const SelectSpecialization = () => {  const router = useRouter();  const { specializations } = useSpecializations();  return (    <div className="flex justify-center">      <div className="mx-auto inline-flex  items-center gap-8 overflow-auto px-8 py-4 text-center sm:text-xl lg:justify-start [&>a>svg]:absolute [&>a>svg]:left-0 [&>a>svg]:top-0 [&>a>svg]:-z-1 [&>a>svg]:w-full [&>a]:relative [&>a]:inline-flex [&>a]:h-24 [&>a]:w-24 [&>a]:shrink-0 [&>a]:items-center [&>a]:justify-center lg:[&>a]:h-32 lg:[&>a]:w-32 ">        {[{ title: 'Všechny', id: '' }, ...specializations]?.map(({ title, id }) => (          <Link key={id} href={{ pathname: route.discover(), query: { ...router.query, specialization: id }, hash: 'guides' }} scroll={false}>            {router.isReady && router.query.specialization === id ? <IconLogoFilledGradient /> : <IconLogoFilled className="text-primary-650" />}            {title}          </Link>        ))}      </div>    </div>  );};export const getServerSideProps: GetServerSideProps = async ({ query }) => {  const specialization = query.specialization as string;  let guides = await getGuides(1, { 'filter[specialization_id]': specialization ? [specialization] : undefined }).catch(() => null);  let streams = await getStreamsWeb(1).catch(() => null);  if (!streams?.data) {    streams = null;  }  if (!guides?.data) {    guides = null;  }  return {    props: { guides, streams },  };};
import Layout from '@/components/layout/Layout';import React from 'react';import AuthLayout from '@/components/layout/AuthLayout';import { H3 } from '@/components/UI/typography/Typography';import useFormErrors from '@/hooks/useFormErrors';import { yupResolver } from '@hookform/resolvers/yup';import { useForm } from 'react-hook-form';import * as yup from 'yup';import TextInput from '@/components/Inputs/TextInput';import Button from '@/components/UI/button/Button';import PasswordInput from '@/components/Inputs/PasswordInput';import { IconFacebookLogo, IconGoogleLogo } from '@/components/UI/Icons';import Link from 'next/link';import { route } from '@/services/routes';import { serializeJsonToFormData, transformJSONAPIData } from '@/services/utils';import { logout } from '@/features/user/modules/user';import api from '@/services/api';import { UserType } from '@/features/user/types/user';import useUser from '@/features/user/hooks/useUser';import { setCookie } from 'cookies-next';import { useRouter } from 'next/router';import { sendVerificationEmail } from './verify-email';import { IResolveParams } from 'reactjs-social-login';import dynamic from 'next/dynamic';import { toast } from '@/components/UI/Toast';import Toggler from '@/components/UI/Toggler';const LoginSocialGoogle = dynamic(() => import('reactjs-social-login').then((lib) => lib.LoginSocialGoogle), { ssr: false });const LoginSocialFacebook = dynamic(() => import('reactjs-social-login').then((lib) => lib.LoginSocialFacebook), { ssr: false });export default function Login() {  const router = useRouter();  const { setUser } = useUser();  const { errors: formErrors, transformErrors } = useFormErrors();  const schema = yup.object({    email: yup.string().email(formErrors.email).required(formErrors.required),    password: yup.string().required(formErrors.required),  });  type FormType = yup.InferType<typeof schema>;  const {    register,    handleSubmit,    setError,    formState: { errors, isSubmitting },  } = useForm<FormType>({    resolver: yupResolver(schema),  });  const socialLogin = async ({ data, provider }: IResolveParams) => {    const providerData = {      google: {        key: 'google_token',        token: data?.access_token,      },      facebook: {        key: 'fb_token',        token: data?.accessToken,      },    };    await logout().catch(() => { });    return api      .post(        '/auth/login',        serializeJsonToFormData({          [providerData[provider as keyof typeof providerData].key]: providerData[provider as keyof typeof providerData].token,        }),      )      .then(async (res) => {        const user = transformJSONAPIData<UserType>(res.data).data;        loginUserHandle(user);      })      .catch(() => {        api          .post(            '/auth/register',            serializeJsonToFormData({              [providerData[provider as keyof typeof providerData].key]: providerData[provider as keyof typeof providerData].token,              email: data?.email,              role: 'customer',              locale: 'cs',            }),          )          .then((res) => {            const user = transformJSONAPIData<UserType>(res.data).data;            loginUserHandle(user);            if (user.email_verified_at) {              router.push(route.homepage());              toast.success('Registrace proběhla úspěšně.');            } else {              router.push({ pathname: route.verifyEmail(), query: { email: data?.email } });            }          })          .catch(() => {            toast.error(`Přes službu ${provider} se nepodařilo přihlásit nebo zaregistrovat.`);          });      });  };  const loginUserHandle = async (user: UserType) => {    if (!user.email_verified_at) {      sendVerificationEmail(user.email);      router.push({ pathname: route.verifyEmail(), query: { email: user.email } });      return;    }    setUser(user);    localStorage.setItem('auto-login', '1');    setCookie('user-id', user.id, {      path: '/',      maxAge: 10 * 365 * 24 * 60 * 60,    });    const restoreIntent = () => {      try {        const raw = localStorage.getItem('post-login-intent');        if (!raw) return false;        const intent = JSON.parse(raw) as { type?: string; slug?: string; action?: 'video' | 'audio' | 'chat' };        localStorage.removeItem('post-login-intent');        if (intent?.type === 'guide-action' && intent.slug) {          const url = intent.action            ? { pathname: route.discoverDetail(intent.slug), query: { start: intent.action } }            : { pathname: route.discoverDetail(intent.slug) };          router.push(url);          return true;        }      } catch {}      return false;    };    if (router.query.redirect_url) {      await router.push(router.query.redirect_url as string);    } else if (!restoreIntent()) {      router.push(user.role === 'guide' ? route.guideProfile() : route.discover());    }  };  const onSubmit = handleSubmit(async (data) => {    await logout().catch(() => { });    return api      .post('/auth/login', serializeJsonToFormData(data))      .then(async (res) => {        const user = transformJSONAPIData<UserType>(res.data).data;        loginUserHandle(user);      })      .catch((err) => {        transformErrors(err, setError);      });  });  return (    <>      <div>        <H3 tag="h1">Přihlásit se</H3>        <div className="flex flex-col mt-2.5 gap-2.5">          <span> Ještě nemáš účet?{' '}</span>          <Button href={route.registration()} color='gradient' className="w-full text-white text-xl !rounded-md">            Registruj se          </Button>        </div>        <p className="mt-9">Přihlaš se a zůstaň ve spojení. Registrace a profil na SPIRIO je zcela zdrama.</p>        <form onSubmit={onSubmit} className="mt-6">          <div className="flex flex-col gap-6">            <TextInput {...register('email')} label="E-mail" error={errors.email?.message} autoComplete="new-password" />            <div>              <PasswordInput {...register('password')} label="Heslo" error={errors.password?.message} autoComplete="new-password" />              <Link href={route.forgottenPassword()} className="text-xs font-500 text-primary-550 hover:underline">                Zapomněl jsi heslo?              </Link>            </div>          </div>          <Button type="submit" color="gradient" className="mt-7.5 w-full" loading={isSubmitting}>            Přihlásit se          </Button>        </form>        <div className="mt-7.5 flex flex-col gap-7.5">          <div className="flex flex-col gap-2.5 [&>button]:whitespace-normal [&>button]:!px-14">            <Toggler>              {({ open, setOpen }) => (                <LoginSocialGoogle                  client_id={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!}                  redirect_uri={process.env.NEXT_PUBLIC_FRONTEND_URL}                  scope="profile email"                  discoveryDocs="claims_supported"                  onResolve={async ({ provider, data }: IResolveParams) => {                    setOpen(true);                    await socialLogin({ provider, data });                    setOpen(false);                  }}                  onReject={() => {                    toast.error('Nepodařilo se přihlásit přes Google');                  }}                >                  <Button color="transparent-white" className="relative w-full" loading={open}>                    <IconGoogleLogo className="pointer-events-none absolute left-5 top-1/2 h-6 -translate-y-1/2" />                    Přihlásit se přes Google                  </Button>                </LoginSocialGoogle>              )}            </Toggler>            <Toggler>              {({ open, setOpen }) => (                <LoginSocialFacebook                  appId={process.env.NEXT_PUBLIC_FACEBOOK_APP_ID!}                  redirect_uri={process.env.NEXT_PUBLIC_FRONTEND_URL}                  fieldsProfile={'id,email'}                  onResolve={async ({ provider, data }: IResolveParams) => {                    setOpen(true);                    await socialLogin({ provider, data });                    setOpen(false);                  }}                  onReject={() => {                    toast.error('Nepodařilo se přihlásit přes Facebook');                  }}                >                  <Button color="transparent-white" className="relative w-full" loading={open}>                    <IconFacebookLogo className="pointer-events-none absolute left-5 top-1/2 h-6 -translate-y-1/2" />                    Přihlásit se přes Facebook                  </Button>                </LoginSocialFacebook>              )}            </Toggler>            {}          </div>          <p className="text-center font-500 [&>a]:underline flex flex-col items-center">            <span className='text-md text-white/60 whitespace-pre-wrap'> Nevíš si rady? </span>            <span className='text-white'> Volej <a href="tel:+420608047033">+420 608 047 033</a>              <span className='text-white/60'> nebo napiš na </span>              <a href="mailto:podpora@spirio.cz">podpora@spirio.cz</a></span>          </p>        </div>      </div>    </>  );}Login.getLayout = function getLayout(page: React.ReactElement) {  return (    <Layout hideFooter>      <AuthLayout>{page}</AuthLayout>    </Layout>  );};export async function getServerSideProps() {  return {};}
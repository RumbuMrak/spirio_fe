import { StreamChat } from "stream-chat";import { guideName } from "@/services/utils";import { UserType } from "../user/types/user";const STREAM_API_KEY = process.env.NEXT_PUBLIC_STREAM_API_KEY!;const serverClient = StreamChat.getInstance(STREAM_API_KEY	);export async function setToken(token: string, userid: string) {	serverClient.tokenManager.setTokenOrProvider( token, { id : userid})}export async function connectUser(userData: UserType, token:string){    await serverClient.connectUser(		{		  id: userData.id!,		  name: (userData.role === 'guide' ? guideName(userData.guide_profile!) : userData.nickname) || userData?.email,		  language: "cs"		}, token	  );}export async function updateChannel({	data,	channelId}: {	data: { name: string; imageUrl: string };	channelId : string;}) {	try {		const channels = await serverClient.queryChannels(			{				type: "messaging",				id:channelId			},			{ last_message_at: -1 }		);		 console.info(channelId)		if (channels.length === 0) {			return {				success: false,				error: "You already have an existing channel",			};		}		const channel = serverClient.channel("messaging", channelId);		try {		  } catch (err) {			console.error('Failed to update channel:', err);		  }		return { success: true, error: null, id: channel.id };	} catch (err) {		return { success: false, error: "Failed to create channel", id: null };	}}export async function createChannel({	userId,	data,	channelId}: {	userId: string;	data: { name: string; imageUrl: string };	channelId : string;}) {	try {		const channels = await serverClient.queryChannels(			{				 members: { $in: [userId] },				type: "messaging",			},			{ last_message_at: -1 }		);		if (channels.length > 0) {			for (const channel of channels) {				if (channel.id === channelId) 					return { success: true, error: null, id: channel.id, channel:channel };				await channel.delete();			}		}		const channel = serverClient.channel("messaging", channelId, {			name: data.name,			image: data.imageUrl,			members: [userId],			created_by_id: userId,		});		await channel.create();		return { success: true, error: null, id: channel.id, channel:channel };	} catch (err) {		return { success: false, error: "Failed to create channel", id: null };	}}export async function getInstructorChannel(userId: string) {	try {		const channels = await serverClient.queryChannels(			{				members: { $in: [userId] },				type: "messaging",			},			{ last_message_at: -1 }		);		return `/chat/${channels[0].id}`;	} catch (err) {		return null;	}}export async function addUserToChannel(channelId: string, userId: string, guideId:string) {	try {		const channel = serverClient.channel("messaging", channelId);		if (channel.data?.member_count === 2){			return {				success: true,				error: null,				id: channel.id,				message: "there",			};		}		console.info(userId)		console.info(guideId)		await channel.addMembers([userId], { role:  (userId === guideId)?'guide':'user' });		return {			success: true,			error: null,			members: channel.data?.member_count,			id: channel.id,			message: "Member just added",		};	} catch (error) {		console.error("Error adding user to channel:", error);		return {			success: false,			error: "Failed to add user to channel",			id: null,			message: null,		};	}}
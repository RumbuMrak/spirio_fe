import React from 'react';import Modal from '@/components/UI/modal/Modal';import { H3 } from '@/components/UI/typography/Typography';import Button from '@/components/UI/button/Button';import TextInput from '@/components/Inputs/TextInput';import PasswordInput from '@/components/Inputs/PasswordInput';import { yupResolver } from '@hookform/resolvers/yup';import * as yup from 'yup';import { useForm } from 'react-hook-form';import { toast } from '@/components/UI/Toast';import api from '@/services/api';import { serializeJsonToFormData, transformJSONAPIData } from '@/services/utils';import { UserType } from '@/features/user/types/user';import useUser from '@/features/user/hooks/useUser';import { useRouter } from 'next/router';import { setCookie } from 'cookies-next';import { route } from '@/services/routes';import { logout } from '@/features/user/modules/user';import dynamic from 'next/dynamic';import Toggler from '@/components/UI/Toggler';import { IResolveParams } from 'reactjs-social-login';import useModal from '@/hooks/useModal';const LoginSocialGoogle = dynamic(() => import('reactjs-social-login').then((lib) => lib.LoginSocialGoogle), { ssr: false });const LoginSocialFacebook = dynamic(() => import('reactjs-social-login').then((lib) => lib.LoginSocialFacebook), { ssr: false });const GoogleIcon: React.FC<{ className?: string }> = ({ className }) => (  <svg className={className} viewBox="0 0 48 48" width="20" height="20" aria-hidden="true">    <path fill="#FFC107" d="M43.6 20.5H42V20H24v8h11.3C33.8 32.6 29.3 36 24 36c-6.6 0-12-5.4-12-12S17.4 12 24 12c3 0 5.7 1.1 7.8 3l5.7-5.7C33.9 5.1 29.2 3 24 3 12.4 3 3 12.4 3 24s9.4 21 21 21c10.5 0 19.5-7.6 21-17.5.1-.8.1-1.6.1-2.4 0-1.4-.1-2.4-.5-4.6z"/>    <path fill="#FF3D00" d="M6.3 14.7l6.6 4.8C14.8 16.1 18.9 12 24 12c3 0 5.7 1.1 7.8 3l5.7-5.7C33.9 5.1 29.2 3 24 3 16.1 3 9.2 7.4 6.3 14.7z"/>    <path fill="#4CAF50" d="M24 45c5.2 0 9.9-1.9 13.5-5.1l-6.2-5.1C29.2 36.9 26.7 38 24 38c-5.2 0-9.6-3.3-11.2-7.9l-6.5 5C9.1 41.9 15.9 45 24 45z"/>    <path fill="#1976D2" d="M45 24c0-1.4-.1-2.4-.5-4.6H24v8h11.3c-.5 2.6-2.1 4.9-4.5 6.4l6.2 5.1C41.2 35.7 45 30.5 45 24z"/>  </svg>);const FacebookIcon: React.FC<{ className?: string }> = ({ className }) => (  <svg className={className} viewBox="0 0 24 24" width="20" height="20" aria-hidden="true">    <path fill="#1877F2" d="M24 12.073C24 5.405 18.627 0 12 0S0 5.405 0 12.073C0 18.1 4.388 23.093 10.125 24v-8.437H7.078V12.07h3.047V9.413c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953h-1.513c-1.49 0-1.954.93-1.954 1.883v2.255h3.328l-.532 3.492h-2.796V24C19.612 23.093 24 18.1 24 12.073z"/>    <path fill="#FFF" d="M16.671 15.565l.532-3.492h-3.328V9.818c0-.953.463-1.883 1.954-1.883h1.513V4.982s-1.374-.235-2.686-.235c-2.74 0-4.533 1.662-4.533 4.669v2.657H7.078v3.055h3.047V24h3.75v-8.435h2.796z"/>  </svg>);const useRestoreIntent = () => {  const router = useRouter();  return React.useCallback(() => {    try {      const raw = localStorage.getItem('post-login-intent');      if (!raw) return false;      const intent = JSON.parse(raw) as { type?: string; slug?: string; action?: 'video' | 'audio' | 'chat' };      localStorage.removeItem('post-login-intent');      if (intent?.type === 'guide-action' && intent.slug) {        const url = intent.action          ? { pathname: route.discoverDetail(intent.slug), query: { start: intent.action } }          : { pathname: route.discoverDetail(intent.slug) };        router.push(url);        return true;      }    } catch {}    return false;  }, [router]);};const LoginForm: React.FC<{ onSuccess: (user: UserType) => void }> = ({ onSuccess }) => {  const router = useRouter();  const { setUser } = useUser();  const schema = yup.object({    email: yup.string().email('Neplatný e-mail').required('Povinné'),    password: yup.string().required('Povinné'),  });  type FormType = yup.InferType<typeof schema>;  const {    register,    handleSubmit,    setError,    formState: { errors, isSubmitting },  } = useForm<FormType>({ resolver: yupResolver(schema) });  const socialLogin = async ({ data, provider }: IResolveParams) => {    const providerData = {      google: { key: 'google_token', token: (data as any)?.access_token },      facebook: { key: 'fb_token', token: (data as any)?.accessToken },    } as const;    await logout().catch(() => {});    return api      .post(        '/auth/login',        serializeJsonToFormData({          [providerData[provider as keyof typeof providerData].key]: providerData[provider as keyof typeof providerData].token,        }),      )      .then(async (res) => {        const user = transformJSONAPIData<UserType>(res.data).data;        loginUserHandle(user);      })      .catch(() => {        toast.error(`Přihlášení přes ${provider} selhalo.`);      });  };  const loginUserHandle = async (user: UserType) => {    if (!user.email_verified_at) {      router.push({ pathname: route.verifyEmail(), query: { email: user.email } });      return;    }    setUser(user);    localStorage.setItem('auto-login', '1');    setCookie('user-id', user.id, { path: '/', maxAge: 10 * 365 * 24 * 60 * 60 });    onSuccess(user);  };  const onSubmit = handleSubmit(async (data) => {    await logout().catch(() => {});    return api      .post('/auth/login', serializeJsonToFormData(data))      .then(async (res) => {        const user = transformJSONAPIData<UserType>(res.data).data;        loginUserHandle(user);      })      .catch((err) => {        const msg = err?.response?.data?.message || 'Přihlášení se nezdařilo.';        if (msg.toLowerCase().includes('email')) setError('email', { message: msg });        else if (msg.toLowerCase().includes('password')) setError('password', { message: msg });        else toast.error(msg);      });  });  return (    <div>      <form onSubmit={onSubmit} className="mt-4">        <div className="flex flex-col gap-4">          <TextInput {...register('email')} label="E-mail" error={errors.email?.message} autoComplete="email" />          <PasswordInput {...register('password')} label="Heslo" error={errors.password?.message} autoComplete="current-password" />        </div>        <Button type="submit" color="gradient" className="mt-5 w-full" loading={isSubmitting}>          Přihlásit se        </Button>      </form>           <div className="my-3 flex items-center gap-3 text-white/80">        <div className="h-px flex-1 bg-white/20" />        <span className="text-xs uppercase tracking-wider">Nebo</span>        <div className="h-px flex-1 bg-white/20" />      </div>       <div className="mt-5 flex flex-col gap-2 [&>button]:whitespace-normal [&>button]:!px-14">        <Toggler>          {({ open, setOpen }) => (            <LoginSocialGoogle              client_id={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!}              redirect_uri={process.env.NEXT_PUBLIC_FRONTEND_URL}              scope="profile email"              discoveryDocs="claims_supported"              onResolve={async ({ provider, data }: IResolveParams) => {                setOpen(true);                await socialLogin({ provider, data });                setOpen(false);              }}              onReject={() => {                toast.error('Nepodařilo se přihlásit přes Google');              }}            >              <Button color="transparent-white" className="relative w-full flex items-center justify-center gap-2" loading={open}>                <GoogleIcon />                <span>Přihlásit se přes Google</span>              </Button>            </LoginSocialGoogle>          )}        </Toggler>        <Toggler>          {({ open, setOpen }) => (            <LoginSocialFacebook              appId={process.env.NEXT_PUBLIC_FACEBOOK_APP_ID!}              redirect_uri={process.env.NEXT_PUBLIC_FRONTEND_URL}              fieldsProfile={'id,email'}              onResolve={async ({ provider, data }: IResolveParams) => {                setOpen(true);                await socialLogin({ provider, data });                setOpen(false);              }}              onReject={() => {                toast.error('Nepodařilo se přihlásit přes Facebook');              }}            >              <Button color="transparent-white" className="relative w-full flex items-center justify-center gap-2" loading={open}>                <FacebookIcon />                <span>Přihlásit se přes Facebook</span>              </Button>            </LoginSocialFacebook>          )}        </Toggler>      </div>    </div>  );};const RegistrationForm: React.FC<{ onSuccess: (user: UserType) => void }> = ({ onSuccess }) => {  const router = useRouter();  const { logInUser } = useUser();  const restoreIntent = useRestoreIntent();  const schema = yup.object({    email: yup.string().email('Neplatný e-mail').required('Povinné'),    password: yup.string().required('Povinné'),    password_confirmation: yup      .string()      .nullable()      .oneOf([yup.ref('password'), null], 'Hesla se neshodují')      .required('Povinné'),    referral_code: yup.string().optional().nullable(),  });  type FormType = yup.InferType<typeof schema>;  const { register, handleSubmit, setError, watch, formState: { errors, isSubmitting } } = useForm<FormType>({    resolver: yupResolver(schema),  });  const socialRegistration = async ({ data, provider }: IResolveParams) => {    const providerData = {      google: { key: 'google_token', token: (data as any)?.access_token },      facebook: { key: 'fb_token', token: (data as any)?.accessToken },    } as const;    await logout().catch(() => {});    return api      .post(        '/auth/register',        serializeJsonToFormData({          [providerData[provider as keyof typeof providerData].key]: providerData[provider as keyof typeof providerData].token,          email: (data as any)?.email,          role: 'customer',          locale: 'cs',          referral_code: watch('referral_code') || null,        }),      )      .then((res) => {        const user = transformJSONAPIData<UserType>(res.data).data;        logInUser(user);        if (user.email_verified_at) {          if (!(restoreIntent())) router.push(route.homepage());          toast.success('Registrace proběhla úspěšně.');          onSuccess(user);        } else {          router.push({ pathname: route.verifyEmail(), query: { email: (data as any)?.email } });        }      })      .catch(() => {        toast.error(`Přes službu ${provider} se nepodařilo zaregistrovat.`);      });  };  const onSubmit = handleSubmit(async ({ password_confirmation, referral_code, ...values }) => {    await logout().catch(() => {});    return api      .post('/auth/register', serializeJsonToFormData({ ...values, referral_code: referral_code || null, role: 'customer', locale: 'cs' }))      .then((res) => {        const user = transformJSONAPIData<UserType>(res.data).data;        if (user.email_verified_at) {          logInUser(user);          if (!restoreIntent()) router.push(route.homepage());          toast.success('Registrace proběhla úspěšně.');          onSuccess(user);        } else {          router.push({ pathname: route.verifyEmail(), query: { email: values.email } });        }      })      .catch((err) => {        const msg = err?.response?.data?.message || 'Registrace se nezdařila.';        toast.error(msg);        if (msg.toLowerCase().includes('email')) setError('email', { message: msg });      });  });  return (    <div>        <div className="mt-5 flex flex-col gap-2 [&>button]:whitespace-normal [&>button]:!px-14">        <Toggler>          {({ open, setOpen }) => (            <LoginSocialGoogle              client_id={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!}              redirect_uri={process.env.NEXT_PUBLIC_FRONTEND_URL}              scope="profile email"              discoveryDocs="claims_supported"              onResolve={async ({ provider, data }: IResolveParams) => {                setOpen(true);                await socialRegistration({ provider, data });                setOpen(false);              }}              onReject={() => {                toast.error('Nepodařilo se zaregistrovat přes Google');              }}            >              <Button color="transparent-white" className="relative w-full flex items-center justify-center gap-2" loading={open}>                <GoogleIcon />                <span>Registrovat se přes Google</span>              </Button>            </LoginSocialGoogle>          )}        </Toggler>        <Toggler>          {({ open, setOpen }) => (            <LoginSocialFacebook              appId={process.env.NEXT_PUBLIC_FACEBOOK_APP_ID!}              redirect_uri={process.env.NEXT_PUBLIC_FRONTEND_URL}              fieldsProfile={'id,email'}              onResolve={async ({ provider, data }: IResolveParams) => {                setOpen(true);                await socialRegistration({ provider, data });                setOpen(false);              }}              onReject={() => {                toast.error('Nepodařilo se zaregistrovat přes Facebook');              }}            >              <Button color="transparent-white" className="relative w-full flex items-center justify-center gap-2" loading={open}>                <FacebookIcon />                <span>Registrovat se přes Facebook</span>              </Button>            </LoginSocialFacebook>          )}        </Toggler>      </div>      <div className="my-3 flex items-center gap-3 text-white/80">        <div className="h-px flex-1 bg-white/20" />        <span className="text-xs uppercase tracking-wider">Nebo</span>        <div className="h-px flex-1 bg-white/20" />      </div>      <form onSubmit={onSubmit} className="mt-4">        <div className="flex flex-col gap-4">          <TextInput {...register('email')} label="E-mail" error={errors.email?.message} autoComplete="email" />          <PasswordInput {...register('password')} label="Heslo" error={errors.password?.message} autoComplete="new-password" />          <PasswordInput {...register('password_confirmation')} label="Heslo znovu" error={errors.password_confirmation?.message} />          <TextInput {...register('referral_code')} label="Odkaz doporučitele (volitelné)" error={errors.referral_code?.message} />        </div>        <Button type="submit" color="gradient" className="mt-5 w-full" loading={isSubmitting}>          Registrovat se        </Button>      </form>    </div>  );};const AuthModal: React.FC = () => {  const router = useRouter();  const { closeModal, getModalState } = useModal();  const queryMode = (router.query.mode as string) || (getModalState('auth') as any)?.mode;  const [tab, setTab] = React.useState<'login' | 'register'>(queryMode === 'register' ? 'register' : 'login');  React.useEffect(() => {    const m = (router.query.mode as string) || (getModalState('auth') as any)?.mode;    if (m === 'register' || m === 'login') setTab(m);  }, [router.query.mode]);  const onClose = () => closeModal('auth', { queries: ['mode', 'redirect_url'] });  return (    <Modal name="auth" width="520px" showClose={true} close={onClose}>      <div className="px-1 py-1">        <H3 tag="h2" className="mb-3 text-center">          {tab === 'login' ? 'Přihlásit se' : 'Registrovat se'}        </H3>        {tab === 'login' ? (          <LoginForm onSuccess={() => onClose()} />        ) : (          <RegistrationForm onSuccess={() => onClose()} />        )}        <div className="mt-6 text-center text-sm text-white/80">          {tab === 'login' ? (            <>              Nemáte účet?{' '}              <button                type="button"                className="text-gradient underline decoration-white/40 hover:decoration-white  text-lg"                onClick={() => setTab('register')}              >                Registrace              </button>            </>          ) : (            <>              Už máte účet?{' '}              <button                type="button"                className="text-gradient underline font-bold decoration-white/40 hover:decoration-white text-lg"                onClick={() => setTab('login')}              >                Přihlášení              </button>            </>          )}        </div>      </div>    </Modal>  );};export default AuthModal;
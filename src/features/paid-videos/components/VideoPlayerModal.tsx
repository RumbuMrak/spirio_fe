import React, { useRef, useState, useEffect } from 'react';import Modal from '@/components/UI/modal/Modal';import useModal from '@/hooks/useModal';import { X } from '@phosphor-icons/react';import Button from '@/components/UI/button/Button';interface VideoPlayerModalProps {  videoId: number;  videoTitle: string;}interface VideoData {  type?: 'youtube' | 'file';  video_id?: string;  url?: string;}export default function VideoPlayerModal({ videoId, videoTitle }: VideoPlayerModalProps) {  const { closeModal, getModalState } = useModal();  const videoRef = useRef<HTMLVideoElement>(null);  const [isFullscreen, setIsFullscreen] = useState(false);  const [volume, setVolume] = useState(1);  const [isMuted, setIsMuted] = useState(false);  const [videoData, setVideoData] = useState<VideoData | null>(null);  const [loading, setLoading] = useState(true);  const [error, setError] = useState<string | null>(null);  const state = getModalState('video-player') as unknown as { videoId: string; videoTitle: string } | null;  useEffect(() => {    const video = videoRef.current;    if (!video) return;    const handleFullscreenChange = () => {      setIsFullscreen(!!document.fullscreenElement);    };    document.addEventListener('fullscreenchange', handleFullscreenChange);    return () => {      document.removeEventListener('fullscreenchange', handleFullscreenChange);    };  }, []);  useEffect(() => {    if (state?.videoId) {      setLoading(true);      setError(null);      fetch(`/api/v1/paid_videos/stream?paid_video_id=${state.videoId}`, {        method: 'GET',        credentials: 'include',        headers: {          'Accept': 'application/json',          'Content-Type': 'application/json',        },      })        .then(async (response) => {          if (response.ok) {            const data = await response.json();            setVideoData(data);          } else {            throw new Error('Failed to load video');          }        })        .catch((err) => {          console.error('Error loading video:', err);          setError('Failed to load video');        })        .finally(() => {          setLoading(false);        });    }  }, [state?.videoId]);  const toggleFullscreen = async () => {    const video = videoRef.current;    if (!video) return;    try {      if (!document.fullscreenElement) {        await video.requestFullscreen();      } else {        await document.exitFullscreen();      }    } catch (err) {      console.error('Error toggling fullscreen:', err);    }  };  const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {    const newVolume = parseFloat(e.target.value);    setVolume(newVolume);    if (videoRef.current) {      videoRef.current.volume = newVolume;      setIsMuted(newVolume === 0);    }  };  const toggleMute = () => {    if (videoRef.current) {      const newMuted = !isMuted;      videoRef.current.muted = newMuted;      setIsMuted(newMuted);      if (newMuted) {        setVolume(0);      } else {        setVolume(1);        videoRef.current.volume = 1;      }    }  };  if (!state) return null;  const renderVideoPlayer = () => {    if (loading) {      return (        <div className="relative aspect-video bg-black flex items-center justify-center">          <div className="text-white">Loading video...</div>        </div>      );    }    if (error) {      return (        <div className="relative aspect-video bg-black flex items-center justify-center">          <div className="text-red-400">{error}</div>        </div>      );    }    if (videoData?.type === 'youtube' && videoData.video_id) {      return (        <div className="relative aspect-video bg-black">          <iframe            src={`https://www.youtube.com/embed/${videoData.video_id}?autoplay=1&rel=0&modestbranding=1`}            title={state.videoTitle}            className="w-full h-full"            frameBorder="0"            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"            allowFullScreen          />        </div>      );    }    if (videoData?.url) {      return (        <div className="relative aspect-video bg-black">          <video            ref={videoRef}            src={videoData.url}            className="w-full h-full"            controls            autoPlay            crossOrigin="use-credentials"            onDoubleClick={toggleFullscreen}          />        </div>      );    }    return (      <div className="relative aspect-video bg-black flex items-center justify-center">        <div className="text-white">No video available</div>      </div>    );  };  return (    <Modal name="video-player" width="95vw" showClose={false}>      <div className="relative bg-black rounded-lg overflow-hidden" style={{ maxWidth: '1400px', margin: '0 auto' }}>        {}        <div className="absolute top-0 left-0 right-0 z-10 bg-gradient-to-b from-black/80 to-transparent p-4 flex justify-between items-center">          <h2 className="text-white font-bold text-xl">{state.videoTitle}</h2>          <button            onClick={() => closeModal('video-player')}            className="text-white hover:text-gray-300 transition-colors p-2 hover:bg-white/10 rounded-full"          >            <X size={24} weight="bold" />          </button>        </div>        {}        {renderVideoPlayer()}        {}        {videoData?.type !== 'youtube' && videoData?.url && (          <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-4 opacity-0 hover:opacity-100 transition-opacity">            <div className="flex items-center gap-4">              <button                onClick={toggleMute}                className="text-white hover:text-gray-300 transition-colors"              >                {isMuted ? 'üîá' : 'üîä'}              </button>              <input                type="range"                min="0"                max="1"                step="0.1"                value={volume}                onChange={handleVolumeChange}                className="w-24 cursor-pointer"              />              <div className="flex-grow" />              <Button                onClick={toggleFullscreen}                color="transparent-white"                size="sm"                className="!text-white"              >                {isFullscreen ? 'Ukonƒçit celou obrazovku' : 'Cel√° obrazovka'}              </Button>            </div>          </div>        )}      </div>    </Modal>  );}
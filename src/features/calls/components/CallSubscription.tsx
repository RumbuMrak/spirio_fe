import Button from '@/components/UI/button/Button';import { cn } from '@/services/utils';import { SubscriptionButton } from '@/pages/user/subscriptions';import SubscriptionsIcons from '@/images/subscriptions';import React from 'react';import { usePaymentIntent } from '../api/usePaymentIntent';import usePlans from '@/hooks/data/usePlans';import useUser from '@/features/user/hooks/useUser';import { toast } from '@/components/UI/Toast';import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';import api from '@/services/api';import { CreditCard, Trash } from '@phosphor-icons/react';interface CallSubscriptionComponentProps {  notif2mins: boolean;  notif5mins: boolean;  openChat: boolean;  setOpenChat: (value: boolean) => void;}export const CallSubscriptionComponent: React.FC<CallSubscriptionComponentProps> = ({  notif2mins,  notif5mins,  openChat,  setOpenChat,}) => {  const { plans } = usePlans();  const { user, revalidateUser } = useUser();  const stripe = useStripe();  const elements = useElements();  const limitedPlans = React.useMemo(() =>     plans?.slice(0, 3)?.sort((a, b) => a.price - b.price),     [plans]  );  const [loading, setLoading] = React.useState(false);  const [error, setError] = React.useState<string | null>(null);  const [paymentSuccess, setPaymentSuccess] = React.useState(false);  const [activeSubscription, setActiveSubscription] = React.useState<string>();  const [saveCard, setSaveCard] = React.useState(true);  const [savedCards, setSavedCards] = React.useState<any[]>([]);  const [selectedCard, setSelectedCard] = React.useState<string | null>(null);  React.useEffect(() => {    setError(null);    setSelectedCard(null);  }, [activeSubscription]);  React.useEffect(() => {    if (user?.id) {      loadSavedCards();    }  }, [user?.id]);  const loadSavedCards = async () => {    try {      const response = await api.get('/stripe/payment-methods');      setSavedCards(response.data.payment_methods || []);    } catch (err) {      console.error('Failed to load saved cards:', err);    }  };  const handleDeleteCard = async (paymentMethodId: string) => {    try {      await api.delete(`/stripe/payment-methods/${paymentMethodId}`);      toast.success('Karta byla úspěšně odstraněna');      loadSavedCards();      if (selectedCard === paymentMethodId) {        setSelectedCard(null);      }    } catch (err) {      toast.error('Nepodařilo se odstranit kartu');    }  };  const SubscriptionIcon = {    1: SubscriptionsIcons.SubscriptionStart,    2: SubscriptionsIcons.SubscriptionBronze,    3: SubscriptionsIcons.SubscriptionSilver,    4: SubscriptionsIcons.SubscriptionGold,    5: SubscriptionsIcons.SubscriptionGold,  };  const { createPaymentIntent } = usePaymentIntent();  const handlePayment = async (planId?: string) => {    if (!stripe || !elements) {      setError('Platební služba není dostupná. Zkuste to prosím znovu později.');      return;    }    if (!planId) {      setError('Musíte vybrat plán.');      return;    }    setLoading(true);    setError(null);    try {      const paymentData = await createPaymentIntent(planId);      let result;      if (selectedCard) {        result = await stripe.confirmCardPayment(paymentData.client_secret, {          payment_method: selectedCard,        });      } else {        const card = elements.getElement(CardElement);        if (!card) throw new Error('Card element not found');        result = await stripe.confirmCardPayment(paymentData.client_secret, {          payment_method: {            card,            billing_details: {              email: user?.email ?? undefined,            },          },          setup_future_usage: saveCard ? 'off_session' : undefined,          receipt_email: user?.email,        });      }      if (result.error) {        setError(result.error.message ?? 'Platba selhala');        toast.error(result.error.message ?? 'Platba selhala');      } else if (result.paymentIntent?.status === 'succeeded') {        setPaymentSuccess(true);        toast.success('Platba proběhla úspěšně!');        if (saveCard && !selectedCard) {          await loadSavedCards();        }        await revalidateUser();        setTimeout(() => {          setOpenChat(false);        }, 2000);      }    } catch (err: any) {      const errorMessage = err.response?.data?.message || err.message || 'Platba selhala';      setError(errorMessage);      toast.error(errorMessage);    } finally {      setLoading(false);    }  };  return (    <div className={cn('container justify-center overflow-hidden bg-gradient/80 p-4 rounded-lg', !openChat && 'hidden')}>      <div className="flex flex-col space-y-4">        {}          <div className="grid  gap-1">            {limitedPlans              ?.filter(plan => plan.id !== '99')              ?.map((plan, index) => (                <React.Fragment key={plan.id}>                  <div className={cn(                    'flex flex-col space-y-4 p-4 rounded-lg transition-all',                    activeSubscription === plan.id ? 'bg-primary/20 border border-primary' : 'bg-black/20'                  )}>                    <SubscriptionButton                      id={plan.id}                      state={[activeSubscription, setActiveSubscription]}                      title={plan.title}                      minutes={plan.minutes_count}                      description={plan.minutes_count + 'min'}                      price_visible                      first_payed={user?.first_payed ?? false}                      freeMinutes={-1}                      price={plan.price}                      discount={user?.discount_percent ?? 0}                      icon={SubscriptionIcon[Number(plan.id) as keyof typeof SubscriptionIcon]}                      makerdown={index === 1}                    />                    {}                    {activeSubscription === plan.id && (                      <div className="space-y-4">                        {}                        {error && (                          <div className="bg-error/20 p-3 rounded-lg text-error text-sm">                            {error}                          </div>                        )}                        {}                        {paymentSuccess ? (                          <div className="bg-success/20 p-4 rounded-lg text-success flex items-center justify-center space-x-2">                            <svg className="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />                            </svg>                            <span>Platba byla úspěšně zpracována!</span>                          </div>                        ) : (                          <>                            {}                            {savedCards.length > 0 && (                              <div className="space-y-2">                                <div className="text-sm text-white/80 font-medium">Uložené karty</div>                                <div className="space-y-2">                                  {savedCards.map((card) => (                                    <button                                      key={card.id}                                      type="button"                                      onClick={() => setSelectedCard(card.id)}                                      className={cn(                                        'w-full flex items-center justify-between p-3 rounded-lg cursor-pointer transition-all',                                        selectedCard === card.id                                          ? 'bg-primary/30 border border-primary'                                          : 'bg-black/30 hover:bg-black/40 border border-transparent'                                      )}                                    >                                      <div className="flex items-center gap-3">                                        <CreditCard size={24} weight="duotone" className="text-white" />                                        <div className="text-left">                                          <div className="text-white font-medium">                                            •••• {card.last4}                                          </div>                                          <div className="text-xs text-white/60">                                            {card.brand.toUpperCase()} • Vyprší {card.exp_month}/{card.exp_year}                                          </div>                                        </div>                                      </div>                                      <button                                        type="button"                                        onClick={(e) => {                                          e.stopPropagation();                                          handleDeleteCard(card.id);                                        }}                                        className="p-2 hover:bg-error/20 rounded transition-colors"                                        title="Odstranit kartu"                                        aria-label="Odstranit kartu"                                      >                                        <Trash size={18} className="text-error" />                                      </button>                                    </button>                                  ))}                                </div>                                <div className="text-center">                                  <button                                    onClick={() => setSelectedCard(null)}                                    className="text-sm text-primary hover:underline"                                  >                                    + Použít novou kartu                                  </button>                                </div>                              </div>                            )}                            {}                            {!selectedCard && (                              <>                                <div className="bg-black/30 p-4 rounded-lg">                                  <CardElement options={{                                    style: {                                      base: {                                        color: '#ffffff',                                        fontSize: '16px',                                        '::placeholder': {                                          color: '#bbbbbb',                                        },                                        iconColor: '#ffffff',                                      },                                      invalid: {                                        color: '#ff4d4f',                                        iconColor: '#ff4d4f',                                      },                                    },                                    hidePostalCode: true                                  }}                                  onChange={(e) => {                                    if (e.error) {                                      setError(e.error.message || 'Chyba platební karty');                                    } else {                                      setError(null);                                    }                                  }}                                  />                                </div>                                {}                                <label className="flex items-center gap-2 cursor-pointer">                                  <input                                    type="checkbox"                                    checked={saveCard}                                    onChange={(e) => setSaveCard(e.target.checked)}                                    className="w-4 h-4 rounded border-white/30 bg-black/30 text-primary focus:ring-primary"                                  />                                  <span className="text-sm text-white/80">                                    Uložit kartu pro rychlejší budoucí platby                                  </span>                                </label>                              </>                            )}                            <div className="flex justify-between items-center">                              <div className="text-sm text-white/60">                                Celková cena: <span className="text-white font-bold">{plan.price} Kč</span>                              </div>                              <Button                                onClick={() => handlePayment(plan.id)}                                disabled={loading || (!selectedCard && !elements)}                                loading={loading}                                color="gradient"                                className="min-w-[150px]"                              >                                {loading ? 'Zpracování...' : 'Zaplatit'}                              </Button>                            </div>                          </>                        )}                      </div>                    )}                  </div>                </React.Fragment>              ))}          </div>          {}          <div className="text-xs text-gray-400 text-center mt-4">            🔒 Veškeré platby jsou bezpečně zpracovávány prostřednictvím platební brány Stripe. Tvé platební údaje jsou chráněny a nikdy je u nás neukládáme.          </div>        </div>      </div>  );};export default CallSubscriptionComponent;
import Button from '@/components/UI/button/Button';import { IconPhoneButton } from '@/components/UI/Icons';import useUser from '@/features/user/hooks/useUser';import { getCalls } from '@/hooks/data/useCalls';import api from '@/services/api';import Routes from '@/services/routes';import { serializeJsonToFormData } from '@/services/utils';import { Trash } from '@phosphor-icons/react';import { useRouter } from 'next/router';import React, { useCallback, useRef } from 'react';import useSWR from 'swr';const GuideActiveCallNotification = () => {  const router = useRouter();  const [showNotification, setShowNotification] = React.useState(false);  const [loading, setLoading] = React.useState(false);  const audioRef = useRef<HTMLAudioElement | null>(null);  const { user } = useUser();  const { data: calls, mutate } = useSWR(    ['calls'],    router.isReady && user?.role === 'guide'      ? () => {          return getCalls();        }      : null,    {      revalidateOnMount: true,      revalidateOnFocus: true,      refreshInterval: 4000,    },  );  React.useEffect(() => {    if (user?.role !== 'guide' || !calls?.data?.length) return;    const activeCall = calls?.data?.[0].id;    if (!activeCall) {      const audio = audioRef.current;      audio?.pause();      setShowNotification(false);      return;    }    const callRelatedRoutes = [      Routes.call,      Routes.chat,      Routes['call-end'],      Routes['chat-end'],    ];    if (!callRelatedRoutes.includes(router.pathname as Routes)) {      setShowNotification(true);      if (!audioRef.current) {        audioRef.current = new Audio('/assets/ringtone.mp3');      }      const audio = audioRef.current;      audio.play();      return () => {        setShowNotification(false);        audio.pause();        audio.currentTime = 0;      };    }  }, [calls,calls?.data?.length, user]);  const handleJoinCall = async () => {    const isChat = calls?.data?.[0].getstream_call_id?.includes('chat-');    let activeUser = user;    if (!activeUser?.id) {      console.log('User not available, revalidating...');    }    if (!activeUser?.id) {      console.warn('User still not ready after revalidation.');      return;    }    const call = calls?.data?.[0];    if (!call?.getstream_call_id || !call?.id) {      console.warn('Call data missing.');      return;    }    setShowNotification(false);    try {      await router.push({        pathname:isChat?Routes.chat: Routes.call,        query: {          id: call.getstream_call_id,          callId: call.id,          chatid: call.id,        },      });    } catch (err) {      console.error('Navigation failed:', err);    }  };  const handleRejectCall = useCallback(async () => {    if (!calls?.data?.length) return;    setLoading(true);    try {      const activeCall = calls?.data?.[0].id;      if (activeCall) {        await api.post('/calls/update', serializeJsonToFormData({ id: activeCall, has_ended: true }));        await mutate();      }    } catch (error) {      console.error('Error rejecting call:', error);    } finally {      setLoading(false);    }  }, [calls, mutate]);  if (!showNotification) return null;  const activeCall = calls?.data?.[0].has_ended;  if (activeCall) return null;  const isChat = calls?.data?.[0].getstream_call_id?.includes('chat-'); const  text = isChat? "chat":"hovor";  return (    <div className="fixed left-1/2 top-4 z-50 flex -translate-x-1/2 items-center gap-4 rounded px-4 py-4 bg-gradient">      <div className="mr-auto">        <div>          Čeká na vás {text} s <strong>{calls?.data?.[0].user.nickname || calls?.data?.[0].user.email}</strong>        </div>      </div>      <button          onClick={handleJoinCall}        className="transition-transform hover:scale-105"      >        <span className="absolute block h-10 w-10 animate-ping rounded-full bg-gradient-primary" />        <IconPhoneButton className="relative w-10" />      </button>      <Button onClick={handleRejectCall} className="!p-3" loading={loading}>      {}        <Trash />      </Button>    </div>  );};export default GuideActiveCallNotification;
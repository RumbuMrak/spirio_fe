import React, { useEffect, useRef, useState } from 'react';import { Button } from '@headlessui/react';import { toast } from '@/components/UI/Toast';import { Microphone, Video, X, CheckCircle } from '@phosphor-icons/react';interface DeviceTestProps {  isAudio: boolean;  onSuccess: () => void;  onCancel: () => void;}export const DeviceTest: React.FC<DeviceTestProps> = ({ isAudio, onSuccess, onCancel }) => {  const [stream, setStream] = useState<MediaStream | null>(null);  const [audioDetected, setAudioDetected] = useState<boolean>(false);  const [devices, setDevices] = useState<{    audioinput: MediaDeviceInfo[];    videoinput: MediaDeviceInfo[];  }>({ audioinput: [], videoinput: [] });  const [selectedAudioDevice, setSelectedAudioDevice] = useState<string>('');  const [selectedVideoDevice, setSelectedVideoDevice] = useState<string>('');  const videoRef = useRef<HTMLVideoElement>(null);  const audioContextRef = useRef<AudioContext | null>(null);  const analyserRef = useRef<AnalyserNode | null>(null);  const animationFrameRef = useRef<number>();  const loadDevices = async () => {    try {      await navigator.mediaDevices.getUserMedia({ audio: true, video: !isAudio });      const deviceList = await navigator.mediaDevices.enumerateDevices();      const audioDevices = deviceList.filter(device => device.kind === 'audioinput');      const videoDevices = deviceList.filter(device => device.kind === 'videoinput');      setDevices({ audioinput: audioDevices, videoinput: videoDevices });      if (!selectedAudioDevice && audioDevices.length > 0) {        setSelectedAudioDevice(audioDevices[0].deviceId);      }      if (!selectedVideoDevice && videoDevices.length > 0) {        setSelectedVideoDevice(videoDevices[0].deviceId);      }    } catch (err: any) {      console.error('Error loading devices:', err);      toast.error('Chyba při načítání zařízení: ' + err.message);    }  };  const startMediaTest = async () => {    setAudioDetected(false);    try {      if (audioContextRef.current && audioContextRef.current.state !== 'closed') {        try {          await audioContextRef.current.close();        } catch (e) {          console.log('AudioContext cleanup:', e);        }      }      audioContextRef.current = null;      if (stream) {        stream.getTracks().forEach(track => track.stop());      }      const mediaStream = await navigator.mediaDevices.getUserMedia({        audio: selectedAudioDevice ? {          deviceId: { exact: selectedAudioDevice },          echoCancellation: true,          noiseSuppression: true,          autoGainControl: true        } : false,        video: !isAudio && selectedVideoDevice ? {          deviceId: { exact: selectedVideoDevice }        } : false      });      setStream(mediaStream);      if (!isAudio && videoRef.current) {        videoRef.current.srcObject = mediaStream;      }      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();      analyserRef.current = audioContextRef.current.createAnalyser();      analyserRef.current.fftSize = 256;      analyserRef.current.smoothingTimeConstant = 0.3;      const source = audioContextRef.current.createMediaStreamSource(mediaStream);      source.connect(analyserRef.current);      const bufferLength = analyserRef.current.fftSize;      const timeDataArray = new Uint8Array(bufferLength);      let smoothedLevel = 0;      const updateAudioLevel = () => {        if (analyserRef.current) {          analyserRef.current.getByteTimeDomainData(timeDataArray);          let sum = 0;          for (let i = 0; i < bufferLength; i++) {            const amplitude = (timeDataArray[i] - 128) / 128;            sum += amplitude * amplitude;          }          const rms = Math.sqrt(sum / bufferLength);          const level = Math.min(rms * 1000, 100);          const increasingFactor = 0.3; // Faster response to increases          const decreasingFactor = 0.1; // Slower decrease          const newLevel = level > smoothedLevel             ? smoothedLevel * (1 - increasingFactor) + level * increasingFactor            : Math.max(0, smoothedLevel * (1 - decreasingFactor) + level * decreasingFactor);          smoothedLevel = newLevel;          if (newLevel > 50) {            setAudioDetected(true);          }        }        animationFrameRef.current = requestAnimationFrame(updateAudioLevel);      };      updateAudioLevel();    } catch (err: any) {      if (err.name === 'NotAllowedError') {        toast.error('Prosím povolte přístup k mikrofonu' + (!isAudio ? ' a kameře' : '') + ' pro test zařízení.');      } else {        console.error('Error initializing media devices:', err);        toast.error('Chyba při inicializaci zařízení: ' + err.message);      }    }  };  useEffect(() => {    loadDevices();    const handleDeviceChange = () => {      loadDevices();    };    navigator.mediaDevices.addEventListener('devicechange', handleDeviceChange);    return () => {      navigator.mediaDevices.removeEventListener('devicechange', handleDeviceChange);    };  }, []);  useEffect(() => {    if ((selectedAudioDevice && isAudio) || (selectedVideoDevice && !isAudio)) {      startMediaTest();    }    return () => {      if (stream) {        stream.getTracks().forEach(track => track.stop());      }      if (audioContextRef.current) {        audioContextRef.current.close();      }      if (animationFrameRef.current) {        cancelAnimationFrame(animationFrameRef.current);      }    };  }, [selectedAudioDevice, selectedVideoDevice, isAudio]);  const handleSuccess = () => {    if (stream) {      stream.getTracks().forEach(track => track.stop());    }    onSuccess();  };  const handleCancel = () => {    if (stream) {      stream.getTracks().forEach(track => track.stop());    }    onCancel();  };  return (    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70">      <div className="w-full max-w-2xl rounded-lg bg-gradient p-6">        <div className="mb-4 flex justify-between">          <h2 className="text-xl font-semibold text-white">Test zařízení před hovorem</h2>          <button onClick={handleCancel} className="text-white/60 hover:text-white">            <X size={24} />          </button>        </div>        <div className="space-y-6">          {}          {!isAudio && (            <div className="relative aspect-video w-full overflow-hidden rounded-lg bg-black">              <video                ref={videoRef}                autoPlay                playsInline                muted                className="h-full w-full object-cover"              />              <div className="absolute bottom-4 left-4 flex items-center gap-2 rounded bg-black/60 px-3 py-1.5">                <Video className="text-white" size={20} />                <span className="text-sm text-white">Náhled kamery</span>              </div>            </div>          )}          {}          {devices.audioinput.length > 0 && (            <div className="space-y-2">              <div className="flex items-center gap-2">                <Microphone className="text-white" size={20} />                <span className="text-sm text-white">Vyberte mikrofon</span>              </div>              <select                value={selectedAudioDevice}                onChange={(e) => {                  setSelectedAudioDevice(e.target.value);                  setAudioDetected(false);                }}                className="w-full rounded-lg bg-white/10 px-3 py-2 text-sm text-white"              >                {devices.audioinput.map(device => (                  <option key={device.deviceId} value={device.deviceId}  className=" bg-white/10 text-black">                     <span  className="bg-white/10  text-white">{device.label || `Mikrofon ${device.deviceId.slice(0, 8)}...`}</span>                  </option>                ))}              </select>            </div>          )}          {!isAudio && devices.videoinput.length > 0 && (            <div className="space-y-2">              <div className="flex items-center gap-2">                <Video className="text-white" size={20} />                <span className="text-sm text-white">Vyberte kameru</span>              </div>              <select                value={selectedVideoDevice}                onChange={(e) => setSelectedVideoDevice(e.target.value)}                className="w-full rounded-lg bg-white/10 px-3 py-2 text-sm text-white"              >                {devices.videoinput.map(device => (                  <option key={device.deviceId} value={device.deviceId} className=" bg-white/40 text-black">                    <span  className="bg-white/10  text-white">{device.label || `Kamera ${device.deviceId.slice(0, 8)}...`}</span>                  </option>                ))}              </select>            </div>          )}          {}          <div className="space-y-2">            <div className="flex items-center justify-between">              <div className="flex items-center gap-2">                <Microphone className="text-white" size={20} />                <span className="text-sm text-white">Test mikrofonu</span>              </div>              {audioDetected && (                <div className="flex items-center gap-2 text-green-500">                  <CheckCircle size={24} weight="fill" />                  <span className="text-sm">Mikrofon funguje správně</span>                </div>              )}            </div>            {!audioDetected && (              <p className="text-sm text-yellow-400">                ⚠️ Prosím promluvte, aby bylo možné otestovat mikrofon.              </p>            )}          </div>          <div className="flex justify-end gap-3 pt-4">            <Button              onClick={handleCancel}              className="rounded-lg border border-white/20 bg-white/10 px-4 py-2 text-white hover:bg-white/20"            >              Zrušit            </Button>            <Button              onClick={handleSuccess}              className="rounded-lg bg-primary-600 px-4 py-2 text-white hover:bg-primary-500"            >              Pokračovat v hovoru            </Button>          </div>        </div>      </div>    </div>  );};
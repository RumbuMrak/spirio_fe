import { GuideProfileType } from '@/features/user/types/user';import api from '@/services/api';import { transformJSONAPIData } from '@/services/utils';import { PaginatedResponse } from '@types';import { useRouter } from 'next/router';import useSWR from 'swr';import { HoroscopesType } from './useHoroscopes';const take = 500; // Increased to handle users with many bookingsconst useBookings = () => {  const router = useRouter();  const page = router.query.page ? Number(router.query.page) : 1;  const data = useSWR(    ['bookings', page],    router.isReady      ? () => {          return getBookings(page);        }      : null,    {      revalidateOnMount: true,      revalidateOnFocus: true,    },  );  return { ...data, data: data.data?.data, bookingsCount: data.data?.meta.count ?? 0, bookingsPages: Math.ceil(data.data?.meta.count ?? 0) / take };};export default useBookings;export const getBookings = (page?: number) => {  return api    .get('/bookings/index', {      params: { page, take, sort: ['-happening_at'] }, // Sort descending to get newest/future bookings first    })    .then(async (res) => {      const bookings = transformJSONAPIData<BookingType[], PaginatedResponse>(res.data);      return bookings;    });};export type BookingType = {  id: string;  created_at: string;  guide_profile: GuideProfileType;  happening_at: string;  happening_until: string;  timezone: string;  user?: {    email: string;    id: string;    locale: string;    nickname: string;    sign: HoroscopesType['sign'];  };};
import { useGlobalStore } from '@/store/globalStore';import { useRouter } from 'next/router';const useModal = () => {  const router = useRouter();  const [{ modal: modalState }, setGlobalStore] = useGlobalStore();  const openModal = (modal: ModalType, options?: { queries?: Record<string, string>; type?: 'state' | 'query' }) => {    if (options?.type === 'query') {      router.push({ pathname: router.route, query: { ...router.query, modal, ...options?.queries } }, undefined, { scroll: false });    } else if (options?.type === 'state') {      setGlobalStore((state) => ({ ...state, modal: [...state.modal, { name: modal, queries: options?.queries }] }));    }    return { pathname: router.route, query: { ...router.query, modal, ...options?.queries } };  };  const closeModal = (modal: ModalType, options?: { queries?: string[] }) => {    if (router.query.modal) {      const currQueries = { ...router.query };      if (options?.queries) {        options?.queries.forEach((query) => {          currQueries[query] && delete currQueries[query];        });      }      delete currQueries.modal;      router.replace({ pathname: router.pathname, query: { ...currQueries } }, undefined, { scroll: false });    }    setGlobalStore((state) => ({ ...state, modal: state.modal.filter((m) => m.name !== modal) }));  };  const isModalOpen = (modal: ModalType) => {    return router.query.modal === modal || modalState.find((m) => m.name === modal);  };  const getModalState = (modal: ModalType) => {    return modalState.find((m) => m.name === modal)?.queries;  };  return {    openModal,    closeModal,    isModalOpen,    getModalState,  };};export default useModal;export type ModalType = 'register-date' | 'coupon-code' | 'stream-details' | 'access-options' | 'auth' | 'video-player';
import useTranslation from 'next-translate/useTranslation';import errorsData from '../../locales/cs/errors.json';import React from 'react';import { UseFormSetError } from 'react-hook-form';import { toast } from '@/components/UI/Toast';const useFormErrors = () => {  const { t, lang } = useTranslation();  const errors = React.useMemo(() => {    const errorsObject = t('errors.errors', null, { returnObjects: true }) as typeof errorsData.errors;    if (typeof errorsObject !== 'object') return {} as typeof errorsData.errors;    for (const property in errorsObject) {      errorsObject[property as keyof typeof errorsObject] = t(`errors.errors.${property}`, { attribute: t('errors.field'), value: '' });    }    return errorsObject;  }, [lang]);  const getFormError = (error: keyof typeof errors, attributes?: Record<string, any>) => {    return t(`errors.errors.${error}`, { attribute: t('errors.field'), ...attributes });  };  const transformErrors = (error: ErrorType, setError: UseFormSetError<any>) => {    if (!error) return;    const status = error.response.status;    if (status >= 500) {      toast.error(errors.server_error);      return;    } else if (status === 422) {      const data = error.response.data.errors;      const errorList = Object.keys(data);      if (errorList.length) {        errorList.forEach((item) => {          const errorKey = data[item][0] as keyof typeof errors;          setError(            item,            {              message:                errorKey.indexOf(':') > -1 ? getFormError(errorKey.split(':')[0] as keyof typeof errors, { count: errorKey.split(':')[1] }) : errors[errorKey],            },            {              shouldFocus: true,            },          );        });      }      return errors;    } else {      toast.error(error.response.data.msg || t('errors.errors.general_error'));      return;    }  };  return {    errors,    getFormError,    transformErrors,  };};export default useFormErrors;type ErrorType = {  response: { status: number; data: { errors: { [param: string]: string[] }; msg: string } };};
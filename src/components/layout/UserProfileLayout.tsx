import React from 'react';import { useRouter } from 'next/router';import Link from 'next/link';import Head from 'next/head';import { UserCircle } from '@phosphor-icons/react';import Illustrations from '@/images/illustrations';import { cn, getImageUrl, pageTitle } from '@/services/utils';import { route } from '@/services/routes';import useBreakpoint from '@/hooks/useBreakpoint';import useUser from '@/features/user/hooks/useUser';import { useGlobalStore } from '@/store/globalStore';import CouponCodeModal from '@/features/coupon-code/components/CouponCodeModal';import Button from '../UI/button/Button';const UserProfileLayout: React.FC<React.PropsWithChildren> = ({ children }) => {  const { user } = useUser();  const { isInBreakpoint } = useBreakpoint();  const router = useRouter();  const [showMenu, setShowMenu] = React.useState(true); // default to menu  const [, setStore] = useGlobalStore();  React.useEffect(() => {    setStore((store) => ({ ...store, userMenuOpen: false }));  }, [router.asPath]);  const menuItems = [    { title: 'Tvoje témata', href: route.interest() },    { title: 'Zakoupit čas', href: route.subscriptions() },    { title: 'Moje rezervace', href: route.calendar() },    { title: 'Zakoupená videa', href: route.myVideos() },    { title: 'Úprava profilu', href: route.profile() },    { title: 'Změna hesla', href: route.changePassword() },    { title: 'Notifikace', href: route.notifications() },    { title: 'Pozvi přátelé', href: route.invitation() },    { title: 'Promokód', href: { query: { modal: 'coupon-code' } } },    { title: 'Napíšte Nám', href: route.feedback() },    { title: 'O aplikaci', href: route.publisher() },  ];  return (    <>      <Head>        <title>{pageTitle()}</title>      </Head>      <div className="container relative flex gap-12 py-8">        <Illustrations.IllustrationLogo className="absolute -top-4 left-1/2 -z-1 w-[574px] max-w-[80%] -translate-x-1/2" />        {}        {!isInBreakpoint({ to: 'lg' }) && (          <aside className="w-80 shrink-0">            <UserSidebar user={user} menuItems={menuItems} />          </aside>        )}        {}        {isInBreakpoint({ to: 'lg' }) && (          <div className="w-full">            {showMenu ? (                <>              <div className=" left-0 right-0 bottom-0 z-40 overflow-y-auto  text-white px-4">                <div className="flex min-h-full flex-col items-center">                  <UserSidebar user={user} menuItems={menuItems} onLinkClick={() => setShowMenu(false)} />                </div>              </div>              </>            ) : (              <div>                <div className="mb-4 px-4">                  <Button                    onClick={() => setShowMenu(true)}                    className="rounded bg-gradient-primary px-4 py-2 text-sm text-white"                  >                    ← Zpět                  </Button>                </div>                <div className="px-4">{children}</div>              </div>            )}          </div>        )}        {}        {!isInBreakpoint({ to: 'lg' }) && (          <div className="grow xl:max-w-6xl xl:px-8">{children}</div>        )}      </div>      <CouponCodeModal />    </>  );};export default UserProfileLayout;const UserSidebar = ({  user,  menuItems,  onLinkClick,}: {  user: any;  menuItems: { title: string; href: any }[];  onLinkClick?: () => void;}) => {  const router = useRouter();  return (    <div className="w-full max-w-80 px-1 py-8">      <div className="mb-6 flex items-center gap-4">        <span className="relative inline-flex h-21 w-21 overflow-hidden rounded-full bg-gradient-primary">          {user?.avatar ? (            <img src={getImageUrl(user.avatar)} alt="Avatar" className="h-full w-full rounded-full object-cover" />          ) : (            <UserCircle size={46} className="m-auto" />          )}        </span>        <div className="flex flex-col gap-1.5">          <div className="text-xl font-700">{user?.nickname || user?.email}</div>          <div className="flex items-center gap-2 rounded bg-gradient-to-br from-primary-700 to-primary-650 p-2">            <span>{Math.floor((user?.seconds_balance || 0) / 60)} min</span>          </div>        </div>      </div>      <ul className="divide-y divide-white/10 overflow-hidden rounded bg-gradient-to-br from-primary-700 to-primary-650">        {menuItems.map(({ title, href }) => (          <li key={title}>            <Link              href={href}              onClick={onLinkClick}              className={cn('block p-5 text-sm font-500 transition-colors hover:bg-primary-650', {                '!bg-gradient-primary': router.pathname === (typeof href === 'string' ? href : href.pathname),              })}            >              {title}            </Link>          </li>        ))}      </ul>    </div>  );};
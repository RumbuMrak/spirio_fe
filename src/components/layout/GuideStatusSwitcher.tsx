import useUser from '@/features/user/hooks/useUser';import { updateGuideStatus } from '@/features/user/modules/user';import { GuideProfileType } from '@/features/user/types/user';import Routes from '@/services/routes';import { cn } from '@/services/utils';import { useRouter } from 'next/router';import React from 'react';const GuideStatusSwitcher = () => {  const router = useRouter();  const [status, setStatus] = React.useState<GuideProfileType['call_status']>('offline');  const [modes, setModes] = React.useState<string[]>([]);  const { user } = useUser();  React.useEffect(() => {    if (!user?.guide_profile?.call_status) return;    const statusToModesMap: Record<GuideProfileType['call_status'], string[]> = {      offline: [],      busy: [],      'chat-online': ['chat'],      'audio-online': ['audio'],      'chat-audio-online': ['chat', 'audio'],      'chat-video-online': ['chat', 'video'],      online: ['audio', 'video'],      'all-online': ['chat', 'audio', 'video'],    };    const callStatus = user.guide_profile.call_status;    setStatus(callStatus);    setModes(statusToModesMap[callStatus] || []);  }, [user]);  if (!user || user.role === 'customer' || user.role === 'host' ||  ([Routes.call, Routes.chat, Routes['livestream-host'], Routes['call-end']] as string[]).indexOf(router.pathname) > -1)    return null;  const getStatusFromModes = (modes: string[]): GuideProfileType['call_status'] => {    const sorted = [...modes].sort();    const key = sorted.join('-');    switch (key) {      case 'chat':        return 'chat-online';      case 'audio':        return 'audio-online';      case 'audio-chat':      case 'chat-audio':        return 'chat-audio-online';      case 'video-chat':      case 'chat-video':        return 'chat-video-online';      case 'video':      case 'audio-video':        return 'online';      case 'audio-chat-video':      case 'chat-audio-video':      case 'video-audio-chat':        return 'all-online';      default:        return 'offline';    }  };  const updateCallStatus = async (newStatus: GuideProfileType['call_status']) => {    setStatus(newStatus);    await updateGuideStatus(newStatus);  };  const toggleMode = (mode: string) => {    const newModes = modes.includes(mode)      ? modes.filter((m) => m !== mode)      : [...modes, mode];    const newStatus = getStatusFromModes(newModes);    setModes(newModes);    updateCallStatus(newStatus);  };  return (    <div className="fixed bottom-6 left-1/2 flex -translate-x-1/2 items-center gap-2 overflow-hidden rounded-full bg-gradient p-1">      {}      <button        onClick={() => toggleMode('video')}        className={cn('rounded-full px-3 py-1 text-sm', {          'bg-[#B6DC36] text-[#252F04]': modes.includes('video'),        })}      >        Online video      </button>      {}      <button        onClick={() => toggleMode('audio')}        className={cn('rounded-full px-3 py-1 text-sm', {          'bg-[#B6DC36] text-[#252F04]': modes.includes('audio'),        })}      >        Online audio      </button>      {}      <button        onClick={() => toggleMode('chat')}        className={cn('rounded-full px-3 py-1 text-sm', {          'bg-[#B6DC36] text-[#252F04]': modes.includes('chat'),        })}      >        Online chat      </button>      {}      <button        onClick={() => {          setModes([]);          updateCallStatus('offline');        }}        className={cn('rounded-full px-3 py-1 text-sm', {          'bg-[#FC6868] text-[#500D0D]': status === 'offline',        })}      >        Offline      </button>    </div>  );}export default GuideStatusSwitcher;